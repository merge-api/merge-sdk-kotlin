/**
 * Merge Marketing Automation API
 *
 * The unified API for building rich integrations with multiple Marketing Automation platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.mktg.apis

import dev.merge.client.mktg.models.List
import dev.merge.client.mktg.models.MKTGListEndpointRequest
import dev.merge.client.mktg.models.MKTGListResponse
import dev.merge.client.mktg.models.MetaResponse
import dev.merge.client.mktg.models.Contact

import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.serialization.jackson.jackson
import io.ktor.client.call.body
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.future.future
import java.util.concurrent.CompletableFuture

import com.fasterxml.jackson.databind.ObjectMapper

import dev.merge.client.shared.*

open class ListsApi(
baseUrl: String = ApiClient.BASE_URL + "mktg/v1",
httpClientEngine: HttpClientEngine? = null,
httpClientConfig: (HttpClientConfig<*>.() -> Unit)? = null,
json: ObjectMapper = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, json) {

    data class ListsCreateRequest (
        val mkTGListEndpointRequest: MKTGListEndpointRequest,
        val isDebugMode: kotlin.Boolean? = null,
        val runAsync: kotlin.Boolean? = null
    )

    data class ListsListRequest (
        val createdAfter: java.time.OffsetDateTime? = null,
        val createdBefore: java.time.OffsetDateTime? = null,
        val cursor: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val modifiedAfter: java.time.OffsetDateTime? = null,
        val modifiedBefore: java.time.OffsetDateTime? = null,
        val pageSize: kotlin.Int? = null,
        val remoteId: kotlin.String? = null
    )

    data class ListsRetrieveRequest (
        val id: java.util.UUID,
        val includeRemoteData: kotlin.Boolean? = null
    )

    data class ListsSubscribersListRequest (
        val parentId: java.util.UUID,
        val cursor: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val pageSize: kotlin.Int? = null
    )

    /**
    * 
    * Creates a &#x60;List&#x60; object with the given values.
     * @param mkTGListEndpointRequest  
     * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional)
     * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
     * @return MKTGListResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsCreate(requestModel: ListsApi.ListsCreateRequest): MKTGListResponse {
        return listsCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsCreateAsync(requestModel: ListsApi.ListsCreateRequest): CompletableFuture<MKTGListResponse> = GlobalScope.future {
        listsCreate(requestModel)
    }

    /**
     * @param mkTGListEndpointRequest   * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional) * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsCreateExpanded(requestModel: ListsApi.ListsCreateRequest): MKTGListResponse.Expanded {
        return listsCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsCreateExpandedAsync(requestModel: ListsApi.ListsCreateRequest): CompletableFuture<MKTGListResponse.Expanded> = GlobalScope.future {
        listsCreateExpanded(requestModel)
    }

    private suspend inline fun <reified T> listsCreateImpl(requestModel: ListsApi.ListsCreateRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.mkTGListEndpointRequest

        val localVariableQuery = mutableMapOf<String, kotlin.collections.List<String>>()
            requestModel.isDebugMode?.apply { localVariableQuery["is_debug_mode"] = listOf("$this") }
            requestModel.runAsync?.apply { localVariableQuery["run_async"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/lists",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;List&#x60; objects.
     * @param createdAfter If provided, will only return objects created after this datetime. (optional)
     * @param createdBefore If provided, will only return objects created before this datetime. (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param modifiedAfter If provided, will only return objects modified after this datetime. (optional)
     * @param modifiedBefore If provided, will only return objects modified before this datetime. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param remoteId The API provider&#39;s ID for the given object. (optional)
     * @return PaginatedListList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsList(requestModel: ListsApi.ListsListRequest): MergePaginatedResponse<List> {
        return listsListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsListAsync(requestModel: ListsApi.ListsListRequest): CompletableFuture<MergePaginatedResponse<List>> = GlobalScope.future {
        listsList(requestModel)
    }

    /**
     * @param createdAfter If provided, will only return objects created after this datetime. (optional) * @param createdBefore If provided, will only return objects created before this datetime. (optional) * @param cursor The pagination cursor value. (optional) * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param modifiedAfter If provided, will only return objects modified after this datetime. (optional) * @param modifiedBefore If provided, will only return objects modified before this datetime. (optional) * @param pageSize Number of results to return per page. (optional) * @param remoteId The API provider&#39;s ID for the given object. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsListExpanded(requestModel: ListsApi.ListsListRequest): MergePaginatedResponse<List.Expanded> {
        return listsListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsListExpandedAsync(requestModel: ListsApi.ListsListRequest): CompletableFuture<MergePaginatedResponse<List.Expanded>> = GlobalScope.future {
        listsListExpanded(requestModel)
    }

    private suspend inline fun <reified T> listsListImpl(requestModel: ListsApi.ListsListRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, kotlin.collections.List<String>>()
            requestModel.createdAfter?.apply { localVariableQuery["created_after"] = listOf("$this") }
            requestModel.createdBefore?.apply { localVariableQuery["created_before"] = listOf("$this") }
            requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf(this) }
            requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$this") }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.modifiedAfter?.apply { localVariableQuery["modified_after"] = listOf("$this") }
            requestModel.modifiedBefore?.apply { localVariableQuery["modified_before"] = listOf("$this") }
            requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$this") }
            requestModel.remoteId?.apply { localVariableQuery["remote_id"] = listOf(this) }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/lists",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns metadata for &#x60;MKTGList&#x60; POSTs.
     * @return MetaResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsMetaPostRetrieve(): MetaResponse {
        return listsMetaPostRetrieveImpl()
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsMetaPostRetrieveAsync(): CompletableFuture<MetaResponse> = GlobalScope.future {
        listsMetaPostRetrieve()
    }

    /**
    
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsMetaPostRetrieveExpanded(): MetaResponse.Expanded {
        return listsMetaPostRetrieveImpl()
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsMetaPostRetrieveExpandedAsync(): CompletableFuture<MetaResponse.Expanded> = GlobalScope.future {
        listsMetaPostRetrieveExpanded()
    }

    private suspend inline fun <reified T> listsMetaPostRetrieveImpl(): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, kotlin.collections.List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/lists/meta/post",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a &#x60;List&#x60; object with the given &#x60;id&#x60;.
     * @param id  
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @return List
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsRetrieve(requestModel: ListsApi.ListsRetrieveRequest): List {
        return listsRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsRetrieveAsync(requestModel: ListsApi.ListsRetrieveRequest): CompletableFuture<List> = GlobalScope.future {
        listsRetrieve(requestModel)
    }

    /**
     * @param id   * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsRetrieveExpanded(requestModel: ListsApi.ListsRetrieveRequest): List.Expanded {
        return listsRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsRetrieveExpandedAsync(requestModel: ListsApi.ListsRetrieveRequest): CompletableFuture<List.Expanded> = GlobalScope.future {
        listsRetrieveExpanded(requestModel)
    }

    private suspend inline fun <reified T> listsRetrieveImpl(requestModel: ListsApi.ListsRetrieveRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, kotlin.collections.List<String>>()
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/lists/{id}".replace("{" + "id" + "}", "${ requestModel.id }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;Contact&#x60; objects.
     * @param parentId  
     * @param cursor The pagination cursor value. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return PaginatedContactList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsSubscribersList(requestModel: ListsApi.ListsSubscribersListRequest): MergePaginatedResponse<Contact> {
        return listsSubscribersListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsSubscribersListAsync(requestModel: ListsApi.ListsSubscribersListRequest): CompletableFuture<MergePaginatedResponse<Contact>> = GlobalScope.future {
        listsSubscribersList(requestModel)
    }

    /**
     * @param parentId   * @param cursor The pagination cursor value. (optional) * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param pageSize Number of results to return per page. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listsSubscribersListExpanded(requestModel: ListsApi.ListsSubscribersListRequest): MergePaginatedResponse<Contact.Expanded> {
        return listsSubscribersListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun listsSubscribersListExpandedAsync(requestModel: ListsApi.ListsSubscribersListRequest): CompletableFuture<MergePaginatedResponse<Contact.Expanded>> = GlobalScope.future {
        listsSubscribersListExpanded(requestModel)
    }

    private suspend inline fun <reified T> listsSubscribersListImpl(requestModel: ListsApi.ListsSubscribersListRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, kotlin.collections.List<String>>()
            requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf(this) }
            requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$this") }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/lists/{parent_id}/subscribers".replace("{" + "parent_id" + "}", "${ requestModel.parentId }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

}
