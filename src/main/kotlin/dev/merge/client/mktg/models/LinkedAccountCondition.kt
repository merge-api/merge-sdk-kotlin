/**
 * Merge Marketing Automation API
 *
 * The unified API for building rich integrations with multiple Marketing Automation platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.mktg.models


import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * 
 *
 * @param conditionSchemaId The ID indicating which condition schema to use for a specific condition.
 * @param nativeName User-facing *native condition* name. e.g. \"Skip Manager\".
 * @param `operator` The operator for a specific condition.
 * @param fieldName The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \"location_type\".
 * @param commonModel The common model for a specific condition.
 * @param `value` The value for a condition.
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class LinkedAccountCondition (

    /* The ID indicating which condition schema to use for a specific condition. */
    @field:JsonProperty("condition_schema_id")
    val conditionSchemaId: java.util.UUID,

    /* User-facing *native condition* name. e.g. \"Skip Manager\". */
    @field:JsonProperty("native_name")
    val nativeName: kotlin.String?,

    /* The operator for a specific condition. */
    @field:JsonProperty("operator")
    val `operator`: kotlin.String,

    /* The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \"location_type\". */
    @field:JsonProperty("field_name")
    val fieldName: kotlin.String?,

    /* The common model for a specific condition. */
    @field:JsonProperty("common_model")
    val commonModel: kotlin.String? = null,

    /* The value for a condition. */
    @field:JsonProperty("value")
    val `value`: kotlin.Any? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("condition_schema_id")
        val conditionSchemaId: JsonNode,

        @field:JsonProperty("native_name")
        val nativeName: JsonNode,

        @field:JsonProperty("operator")
        val `operator`: JsonNode,

        @field:JsonProperty("field_name")
        val fieldName: JsonNode,

        @field:JsonProperty("common_model")
        val commonModel: JsonNode?,

        @field:JsonProperty("value")
        val `value`: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: LinkedAccountCondition.Expanded): LinkedAccountCondition {
            return LinkedAccountCondition(
                conditionSchemaId = ApiClient.jsonConvertRequiredSafe(expanded.conditionSchemaId),
                nativeName = ApiClient.jsonConvertRequiredSafe(expanded.nativeName),
                `operator` = ApiClient.jsonConvertRequiredSafe(expanded.`operator`),
                fieldName = ApiClient.jsonConvertRequiredSafe(expanded.fieldName),
                commonModel = ApiClient.jsonConvertSafe(expanded.commonModel),
                `value` = ApiClient.jsonConvertSafe(expanded.`value`)
            )
        }
    }
}

