/**
 * Merge Marketing Automation API
 *
 * The unified API for building rich integrations with multiple Marketing Automation platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.mktg.models

import dev.merge.client.mktg.models.CountryEnum

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The Contact Object ### Description The `Contact` object is used to represent a contact in the remote system. ### Usage Example Fetch from the `GET /api/mktg/v1/contact` endpoint and view their phone numbers.
 *
 * @param firstName The contact's first name.
 * @param lastName The contact's last name.
 * @param email The contact's email.
 * @param phone The contact's phone.
 * @param state The contact's state.
 * @param country The contact's country.
 * @param postalCode The contact's postal code.
 * @param remoteCreatedAt When the contact was created in the remote system.
 * @param remoteUpdatedAt When the contact was last updated in the remote system.
 * @param id 
 * @param remoteId The third-party API ID of the matching object.
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class Contact (

    /* The contact's first name. */
    @field:JsonProperty("first_name")
    val firstName: kotlin.String? = null,

    /* The contact's last name. */
    @field:JsonProperty("last_name")
    val lastName: kotlin.String? = null,

    /* The contact's email. */
    @field:JsonProperty("email")
    val email: kotlin.String? = null,

    /* The contact's phone. */
    @field:JsonProperty("phone")
    val phone: kotlin.String? = null,

    /* The contact's state. */
    @field:JsonProperty("state")
    val state: kotlin.String? = null,

    /* The contact's country. */
    @field:JsonProperty("country")
    val country: CountryEnum? = null,

    /* The contact's postal code. */
    @field:JsonProperty("postal_code")
    val postalCode: kotlin.String? = null,

    /* When the contact was created in the remote system. */
    @field:JsonProperty("remote_created_at")
    val remoteCreatedAt: java.time.OffsetDateTime? = null,

    /* When the contact was last updated in the remote system. */
    @field:JsonProperty("remote_updated_at")
    val remoteUpdatedAt: java.time.OffsetDateTime? = null,

    @field:JsonProperty("id")
    val id: java.util.UUID? = null,

    /* The third-party API ID of the matching object. */
    @field:JsonProperty("remote_id")
    val remoteId: kotlin.String? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("first_name")
        val firstName: JsonNode?,

        @field:JsonProperty("last_name")
        val lastName: JsonNode?,

        @field:JsonProperty("email")
        val email: JsonNode?,

        @field:JsonProperty("phone")
        val phone: JsonNode?,

        @field:JsonProperty("state")
        val state: JsonNode?,

        @field:JsonProperty("country")
        val country: JsonNode?,

        @field:JsonProperty("postal_code")
        val postalCode: JsonNode?,

        @field:JsonProperty("remote_created_at")
        val remoteCreatedAt: JsonNode?,

        @field:JsonProperty("remote_updated_at")
        val remoteUpdatedAt: JsonNode?,

        @field:JsonProperty("id")
        val id: JsonNode?,

        @field:JsonProperty("remote_id")
        val remoteId: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: Contact.Expanded): Contact {
            return Contact(
                firstName = ApiClient.jsonConvertSafe(expanded.firstName),
                lastName = ApiClient.jsonConvertSafe(expanded.lastName),
                email = ApiClient.jsonConvertSafe(expanded.email),
                phone = ApiClient.jsonConvertSafe(expanded.phone),
                state = ApiClient.jsonConvertSafe(expanded.state),
                country = ApiClient.jsonConvertSafe(expanded.country),
                postalCode = ApiClient.jsonConvertSafe(expanded.postalCode),
                remoteCreatedAt = ApiClient.jsonConvertSafe(expanded.remoteCreatedAt),
                remoteUpdatedAt = ApiClient.jsonConvertSafe(expanded.remoteUpdatedAt),
                id = ApiClient.jsonConvertSafe(expanded.id),
                remoteId = ApiClient.jsonConvertSafe(expanded.remoteId)
            )
        }
    }
}

