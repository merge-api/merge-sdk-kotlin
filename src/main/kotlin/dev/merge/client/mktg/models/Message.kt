/**
 * Merge Marketing Automation API
 *
 * The unified API for building rich integrations with multiple Marketing Automation platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.mktg.models


import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The Message Object ### Description The `Message` object is used to represent a text message, in-app message or a message sent via another channel in the remote system. ### Usage Example Fetch from the `GET /api/mktg/v1/messages` endpoint and view their body properties.
 *
 * @param fromName The message's from-name.
 * @param sendDate When the message was sent.
 * @param body The message's body.
 * @param id 
 * @param remoteId The third-party API ID of the matching object.
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class Message (

    /* The message's from-name. */
    @field:JsonProperty("from_name")
    val fromName: kotlin.String? = null,

    /* When the message was sent. */
    @field:JsonProperty("send_date")
    val sendDate: java.time.OffsetDateTime? = null,

    /* The message's body. */
    @field:JsonProperty("body")
    val body: kotlin.String? = null,

    @field:JsonProperty("id")
    val id: java.util.UUID? = null,

    /* The third-party API ID of the matching object. */
    @field:JsonProperty("remote_id")
    val remoteId: kotlin.String? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("from_name")
        val fromName: JsonNode?,

        @field:JsonProperty("send_date")
        val sendDate: JsonNode?,

        @field:JsonProperty("body")
        val body: JsonNode?,

        @field:JsonProperty("id")
        val id: JsonNode?,

        @field:JsonProperty("remote_id")
        val remoteId: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: Message.Expanded): Message {
            return Message(
                fromName = ApiClient.jsonConvertSafe(expanded.fromName),
                sendDate = ApiClient.jsonConvertSafe(expanded.sendDate),
                body = ApiClient.jsonConvertSafe(expanded.body),
                id = ApiClient.jsonConvertSafe(expanded.id),
                remoteId = ApiClient.jsonConvertSafe(expanded.remoteId)
            )
        }
    }
}

