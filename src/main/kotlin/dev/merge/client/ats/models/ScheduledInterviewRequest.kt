/**
 * Merge ATS API
 *
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.ats.models

import dev.merge.client.ats.models.ScheduledInterviewStatusEnum

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The ScheduledInterview Object ### Description The `ScheduledInterview` object is used to represent a scheduled interview for a given candidateâ€™s application to a job. An `Application` can have multiple `ScheduledInterview`s depending on the particular hiring process. ### Usage Example Fetch from the `LIST ScheduledInterviews` endpoint and filter by `interviewers` to show all office locations.
 *
 * @param application The application being interviewed.
 * @param jobInterviewStage The stage of the interview.
 * @param organizer The user organizing the interview.
 * @param interviewers Array of `RemoteUser` IDs.
 * @param location The interview's location.
 * @param startAt When the interview was started.
 * @param endAt When the interview was ended.
 * @param status The interview's status.
 * @param integrationParams 
 * @param linkedAccountParams 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class ScheduledInterviewRequest (

    /* The application being interviewed. */
    @field:JsonProperty("application")
    val application: java.util.UUID? = null,

    /* The stage of the interview. */
    @field:JsonProperty("job_interview_stage")
    val jobInterviewStage: java.util.UUID? = null,

    /* The user organizing the interview. */
    @field:JsonProperty("organizer")
    val organizer: java.util.UUID? = null,

    /* Array of `RemoteUser` IDs. */
    @field:JsonProperty("interviewers")
    val interviewers: kotlin.collections.List<java.util.UUID>? = null,

    /* The interview's location. */
    @field:JsonProperty("location")
    val location: kotlin.String? = null,

    /* When the interview was started. */
    @field:JsonProperty("start_at")
    val startAt: java.time.OffsetDateTime? = null,

    /* When the interview was ended. */
    @field:JsonProperty("end_at")
    val endAt: java.time.OffsetDateTime? = null,

    /* The interview's status. */
    @field:JsonProperty("status")
    val status: ScheduledInterviewStatusEnum? = null,

    @field:JsonProperty("integration_params")
    val integrationParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("linked_account_params")
    val linkedAccountParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("application")
        val application: JsonNode?,

        @field:JsonProperty("job_interview_stage")
        val jobInterviewStage: JsonNode?,

        @field:JsonProperty("organizer")
        val organizer: JsonNode?,

        @field:JsonProperty("interviewers")
        val interviewers: kotlin.collections.List<JsonNode>?,

        @field:JsonProperty("location")
        val location: JsonNode?,

        @field:JsonProperty("start_at")
        val startAt: JsonNode?,

        @field:JsonProperty("end_at")
        val endAt: JsonNode?,

        @field:JsonProperty("status")
        val status: JsonNode?,

        @field:JsonProperty("integration_params")
        val integrationParams: JsonNode?,

        @field:JsonProperty("linked_account_params")
        val linkedAccountParams: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: ScheduledInterviewRequest.Expanded): ScheduledInterviewRequest {
            return ScheduledInterviewRequest(
                application = ApiClient.jsonConvertSafe(expanded.application),
                jobInterviewStage = ApiClient.jsonConvertSafe(expanded.jobInterviewStage),
                organizer = ApiClient.jsonConvertSafe(expanded.organizer),
                interviewers = ApiClient.jsonConvertSafe(expanded.interviewers),
                location = ApiClient.jsonConvertSafe(expanded.location),
                startAt = ApiClient.jsonConvertSafe(expanded.startAt),
                endAt = ApiClient.jsonConvertSafe(expanded.endAt),
                status = ApiClient.jsonConvertSafe(expanded.status),
                integrationParams = ApiClient.jsonConvertSafe(expanded.integrationParams),
                linkedAccountParams = ApiClient.jsonConvertSafe(expanded.linkedAccountParams)
            )
        }
    }
}

