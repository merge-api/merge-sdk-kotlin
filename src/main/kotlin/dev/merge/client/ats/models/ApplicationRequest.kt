/**
 * Merge ATS API
 *
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.ats.models


import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The Application Object ### Description The Application Object is used to represent a candidate's journey through a particular Job's recruiting process. If a Candidate applies for multiple Jobs, there will be a separate Application for each Job if the third-party integration allows it.  ### Usage Example Fetch from the `LIST Applications` endpoint and filter by `ID` to show all applications.
 *
 * @param candidate The candidate applying.
 * @param job The job being applied for.
 * @param appliedAt When the application was submitted.
 * @param rejectedAt When the application was rejected.
 * @param source The application's source.
 * @param creditedTo The user credited for this application.
 * @param currentStage The application's current stage.
 * @param rejectReason The application's reason for rejection.
 * @param remoteTemplateId 
 * @param integrationParams 
 * @param linkedAccountParams 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class ApplicationRequest (

    /* The candidate applying. */
    @field:JsonProperty("candidate")
    val candidate: java.util.UUID? = null,

    /* The job being applied for. */
    @field:JsonProperty("job")
    val job: java.util.UUID? = null,

    /* When the application was submitted. */
    @field:JsonProperty("applied_at")
    val appliedAt: java.time.OffsetDateTime? = null,

    /* When the application was rejected. */
    @field:JsonProperty("rejected_at")
    val rejectedAt: java.time.OffsetDateTime? = null,

    /* The application's source. */
    @field:JsonProperty("source")
    val source: kotlin.String? = null,

    /* The user credited for this application. */
    @field:JsonProperty("credited_to")
    val creditedTo: java.util.UUID? = null,

    /* The application's current stage. */
    @field:JsonProperty("current_stage")
    val currentStage: java.util.UUID? = null,

    /* The application's reason for rejection. */
    @field:JsonProperty("reject_reason")
    val rejectReason: java.util.UUID? = null,

    @field:JsonProperty("remote_template_id")
    val remoteTemplateId: kotlin.String? = null,

    @field:JsonProperty("integration_params")
    val integrationParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("linked_account_params")
    val linkedAccountParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("candidate")
        val candidate: JsonNode?,

        @field:JsonProperty("job")
        val job: JsonNode?,

        @field:JsonProperty("applied_at")
        val appliedAt: JsonNode?,

        @field:JsonProperty("rejected_at")
        val rejectedAt: JsonNode?,

        @field:JsonProperty("source")
        val source: JsonNode?,

        @field:JsonProperty("credited_to")
        val creditedTo: JsonNode?,

        @field:JsonProperty("current_stage")
        val currentStage: JsonNode?,

        @field:JsonProperty("reject_reason")
        val rejectReason: JsonNode?,

        @field:JsonProperty("remote_template_id")
        val remoteTemplateId: JsonNode?,

        @field:JsonProperty("integration_params")
        val integrationParams: JsonNode?,

        @field:JsonProperty("linked_account_params")
        val linkedAccountParams: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: ApplicationRequest.Expanded): ApplicationRequest {
            return ApplicationRequest(
                candidate = ApiClient.jsonConvertSafe(expanded.candidate),
                job = ApiClient.jsonConvertSafe(expanded.job),
                appliedAt = ApiClient.jsonConvertSafe(expanded.appliedAt),
                rejectedAt = ApiClient.jsonConvertSafe(expanded.rejectedAt),
                source = ApiClient.jsonConvertSafe(expanded.source),
                creditedTo = ApiClient.jsonConvertSafe(expanded.creditedTo),
                currentStage = ApiClient.jsonConvertSafe(expanded.currentStage),
                rejectReason = ApiClient.jsonConvertSafe(expanded.rejectReason),
                remoteTemplateId = ApiClient.jsonConvertSafe(expanded.remoteTemplateId),
                integrationParams = ApiClient.jsonConvertSafe(expanded.integrationParams),
                linkedAccountParams = ApiClient.jsonConvertSafe(expanded.linkedAccountParams)
            )
        }
    }
}

