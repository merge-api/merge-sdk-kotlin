/**
 * Merge ATS API
 *
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.ats.apis

import dev.merge.client.ats.models.Candidate
import dev.merge.client.ats.models.CandidateEndpointRequest
import dev.merge.client.ats.models.CandidateResponse
import dev.merge.client.ats.models.IgnoreCommonModel
import dev.merge.client.ats.models.IgnoreCommonModelRequest
import dev.merge.client.ats.models.MetaResponse

import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.serialization.jackson.jackson
import io.ktor.client.call.body
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.future.future
import java.util.concurrent.CompletableFuture

import com.fasterxml.jackson.databind.ObjectMapper

import dev.merge.client.shared.*

open class CandidatesApi(
baseUrl: String = ApiClient.BASE_URL + "ats/v1",
httpClientEngine: HttpClientEngine? = null,
httpClientConfig: (HttpClientConfig<*>.() -> Unit)? = null,
json: ObjectMapper = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, json) {

    data class CandidatesCreateRequest (
        val candidateEndpointRequest: CandidateEndpointRequest,
        val isDebugMode: kotlin.Boolean? = null,
        val runAsync: kotlin.Boolean? = null
    )

    data class CandidatesIgnoreCreateRequest (
        val modelId: java.util.UUID,
        val ignoreCommonModelRequest: IgnoreCommonModelRequest
    )

    data class CandidatesListRequest (
        val createdAfter: java.time.OffsetDateTime? = null,
        val createdBefore: java.time.OffsetDateTime? = null,
        val cursor: kotlin.String? = null,
        val expand: kotlin.String? = null,
        val firstName: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val lastName: kotlin.String? = null,
        val modifiedAfter: java.time.OffsetDateTime? = null,
        val modifiedBefore: java.time.OffsetDateTime? = null,
        val pageSize: kotlin.Int? = null,
        val remoteId: kotlin.String? = null
    )

    data class CandidatesRetrieveRequest (
        val id: java.util.UUID,
        val expand: kotlin.String? = null,
        val includeRemoteData: kotlin.Boolean? = null
    )

    /**
    * 
    * Creates a &#x60;Candidate&#x60; object with the given values.
     * @param candidateEndpointRequest  
     * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional)
     * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
     * @return CandidateResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesCreate(requestModel: CandidatesApi.CandidatesCreateRequest): CandidateResponse {
        return candidatesCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesCreateAsync(requestModel: CandidatesApi.CandidatesCreateRequest): CompletableFuture<CandidateResponse> = GlobalScope.future {
        candidatesCreate(requestModel)
    }

    /**
     * @param candidateEndpointRequest   * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional) * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesCreateExpanded(requestModel: CandidatesApi.CandidatesCreateRequest): CandidateResponse.Expanded {
        return candidatesCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesCreateExpandedAsync(requestModel: CandidatesApi.CandidatesCreateRequest): CompletableFuture<CandidateResponse.Expanded> = GlobalScope.future {
        candidatesCreateExpanded(requestModel)
    }

    private suspend inline fun <reified T> candidatesCreateImpl(requestModel: CandidatesApi.CandidatesCreateRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.candidateEndpointRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.isDebugMode?.apply { localVariableQuery["is_debug_mode"] = listOf("$this") }
            requestModel.runAsync?.apply { localVariableQuery["run_async"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/candidates",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Ignores a specific row based on the &#x60;model_id&#x60; in the url. These records will have their properties set to null, and will not be updated in future syncs. The \&quot;reason\&quot; and \&quot;message\&quot; fields in the request body will be stored for audit purposes.
     * @param modelId  
     * @param ignoreCommonModelRequest  
     * @return IgnoreCommonModel
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesIgnoreCreate(requestModel: CandidatesApi.CandidatesIgnoreCreateRequest): IgnoreCommonModel {
        return candidatesIgnoreCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesIgnoreCreateAsync(requestModel: CandidatesApi.CandidatesIgnoreCreateRequest): CompletableFuture<IgnoreCommonModel> = GlobalScope.future {
        candidatesIgnoreCreate(requestModel)
    }

    /**
     * @param modelId   * @param ignoreCommonModelRequest  
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesIgnoreCreateExpanded(requestModel: CandidatesApi.CandidatesIgnoreCreateRequest): IgnoreCommonModel.Expanded {
        return candidatesIgnoreCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesIgnoreCreateExpandedAsync(requestModel: CandidatesApi.CandidatesIgnoreCreateRequest): CompletableFuture<IgnoreCommonModel.Expanded> = GlobalScope.future {
        candidatesIgnoreCreateExpanded(requestModel)
    }

    private suspend inline fun <reified T> candidatesIgnoreCreateImpl(requestModel: CandidatesApi.CandidatesIgnoreCreateRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.ignoreCommonModelRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/candidates/ignore/{model_id}".replace("{" + "model_id" + "}", "${ requestModel.modelId }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;Candidate&#x60; objects.
     * @param createdAfter If provided, will only return objects created after this datetime. (optional)
     * @param createdBefore If provided, will only return objects created before this datetime. (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional)
     * @param firstName If provided, will only return candidates with this first name. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param lastName If provided, will only return candidates with this last name. (optional)
     * @param modifiedAfter If provided, will only return objects modified after this datetime. (optional)
     * @param modifiedBefore If provided, will only return objects modified before this datetime. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param remoteId The API provider&#39;s ID for the given object. (optional)
     * @return PaginatedCandidateList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesList(requestModel: CandidatesApi.CandidatesListRequest): MergePaginatedResponse<Candidate> {
        return candidatesListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesListAsync(requestModel: CandidatesApi.CandidatesListRequest): CompletableFuture<MergePaginatedResponse<Candidate>> = GlobalScope.future {
        candidatesList(requestModel)
    }

    /**
     * @param createdAfter If provided, will only return objects created after this datetime. (optional) * @param createdBefore If provided, will only return objects created before this datetime. (optional) * @param cursor The pagination cursor value. (optional) * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional) * @param firstName If provided, will only return candidates with this first name. (optional) * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param lastName If provided, will only return candidates with this last name. (optional) * @param modifiedAfter If provided, will only return objects modified after this datetime. (optional) * @param modifiedBefore If provided, will only return objects modified before this datetime. (optional) * @param pageSize Number of results to return per page. (optional) * @param remoteId The API provider&#39;s ID for the given object. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesListExpanded(requestModel: CandidatesApi.CandidatesListRequest): MergePaginatedResponse<Candidate.Expanded> {
        return candidatesListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesListExpandedAsync(requestModel: CandidatesApi.CandidatesListRequest): CompletableFuture<MergePaginatedResponse<Candidate.Expanded>> = GlobalScope.future {
        candidatesListExpanded(requestModel)
    }

    private suspend inline fun <reified T> candidatesListImpl(requestModel: CandidatesApi.CandidatesListRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.createdAfter?.apply { localVariableQuery["created_after"] = listOf("$this") }
            requestModel.createdBefore?.apply { localVariableQuery["created_before"] = listOf("$this") }
            requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf(this) }
            requestModel.expand?.apply { localVariableQuery["expand"] = listOf(this) }
            requestModel.firstName?.apply { localVariableQuery["first_name"] = listOf(this) }
            requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$this") }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.lastName?.apply { localVariableQuery["last_name"] = listOf(this) }
            requestModel.modifiedAfter?.apply { localVariableQuery["modified_after"] = listOf("$this") }
            requestModel.modifiedBefore?.apply { localVariableQuery["modified_before"] = listOf("$this") }
            requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$this") }
            requestModel.remoteId?.apply { localVariableQuery["remote_id"] = listOf(this) }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/candidates",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns metadata for &#x60;Candidate&#x60; POSTs.
     * @return MetaResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesMetaPostRetrieve(): MetaResponse {
        return candidatesMetaPostRetrieveImpl()
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesMetaPostRetrieveAsync(): CompletableFuture<MetaResponse> = GlobalScope.future {
        candidatesMetaPostRetrieve()
    }

    /**
    
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesMetaPostRetrieveExpanded(): MetaResponse.Expanded {
        return candidatesMetaPostRetrieveImpl()
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesMetaPostRetrieveExpandedAsync(): CompletableFuture<MetaResponse.Expanded> = GlobalScope.future {
        candidatesMetaPostRetrieveExpanded()
    }

    private suspend inline fun <reified T> candidatesMetaPostRetrieveImpl(): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/candidates/meta/post",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a &#x60;Candidate&#x60; object with the given &#x60;id&#x60;.
     * @param id  
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @return Candidate
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesRetrieve(requestModel: CandidatesApi.CandidatesRetrieveRequest): Candidate {
        return candidatesRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesRetrieveAsync(requestModel: CandidatesApi.CandidatesRetrieveRequest): CompletableFuture<Candidate> = GlobalScope.future {
        candidatesRetrieve(requestModel)
    }

    /**
     * @param id   * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun candidatesRetrieveExpanded(requestModel: CandidatesApi.CandidatesRetrieveRequest): Candidate.Expanded {
        return candidatesRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun candidatesRetrieveExpandedAsync(requestModel: CandidatesApi.CandidatesRetrieveRequest): CompletableFuture<Candidate.Expanded> = GlobalScope.future {
        candidatesRetrieveExpanded(requestModel)
    }

    private suspend inline fun <reified T> candidatesRetrieveImpl(requestModel: CandidatesApi.CandidatesRetrieveRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.expand?.apply { localVariableQuery["expand"] = listOf(this) }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/candidates/{id}".replace("{" + "id" + "}", "${ requestModel.id }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

}
