/**
 * Merge ATS API
 *
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.ats.apis

import dev.merge.client.ats.models.Application
import dev.merge.client.ats.models.ApplicationEndpointRequest
import dev.merge.client.ats.models.ApplicationResponse
import dev.merge.client.ats.models.MetaResponse
import dev.merge.client.ats.models.UpdateApplicationStageRequest

import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.serialization.jackson.jackson
import io.ktor.client.call.body
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.future.future
import java.util.concurrent.CompletableFuture

import com.fasterxml.jackson.databind.ObjectMapper

import dev.merge.client.shared.*

open class ApplicationsApi(
baseUrl: String = ApiClient.BASE_URL + "ats/v1",
httpClientEngine: HttpClientEngine? = null,
httpClientConfig: (HttpClientConfig<*>.() -> Unit)? = null,
json: ObjectMapper = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, json) {

    data class ApplicationsChangeStageCreateRequest (
        val id: java.util.UUID,
        val isDebugMode: kotlin.Boolean? = null,
        val runAsync: kotlin.Boolean? = null,
        val updateApplicationStageRequest: UpdateApplicationStageRequest? = null
    )

    data class ApplicationsCreateRequest (
        val applicationEndpointRequest: ApplicationEndpointRequest,
        val isDebugMode: kotlin.Boolean? = null,
        val runAsync: kotlin.Boolean? = null
    )

    data class ApplicationsListRequest (
        val candidateId: kotlin.String? = null,
        val createdAfter: java.time.OffsetDateTime? = null,
        val createdBefore: java.time.OffsetDateTime? = null,
        val creditedToId: kotlin.String? = null,
        val currentStageId: kotlin.String? = null,
        val cursor: kotlin.String? = null,
        val expand: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val jobId: kotlin.String? = null,
        val modifiedAfter: java.time.OffsetDateTime? = null,
        val modifiedBefore: java.time.OffsetDateTime? = null,
        val pageSize: kotlin.Int? = null,
        val rejectReasonId: kotlin.String? = null,
        val remoteId: kotlin.String? = null,
        val source: kotlin.String? = null
    )

    data class ApplicationsMetaPostRetrieveRequest (
        val applicationRemoteTemplateId: kotlin.String? = null
    )

    data class ApplicationsRetrieveRequest (
        val id: java.util.UUID,
        val expand: kotlin.String? = null,
        val includeRemoteData: kotlin.Boolean? = null
    )

    /**
    * 
    * Updates the &#x60;current_stage&#x60; field of an &#x60;Application&#x60; object
     * @param id  
     * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional)
     * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
     * @param updateApplicationStageRequest  (optional)
     * @return ApplicationResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsChangeStageCreate(requestModel: ApplicationsApi.ApplicationsChangeStageCreateRequest): ApplicationResponse {
        return applicationsChangeStageCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsChangeStageCreateAsync(requestModel: ApplicationsApi.ApplicationsChangeStageCreateRequest): CompletableFuture<ApplicationResponse> = GlobalScope.future {
        applicationsChangeStageCreate(requestModel)
    }

    /**
     * @param id   * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional) * @param runAsync Whether or not third-party updates should be run asynchronously. (optional) * @param updateApplicationStageRequest  (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsChangeStageCreateExpanded(requestModel: ApplicationsApi.ApplicationsChangeStageCreateRequest): ApplicationResponse.Expanded {
        return applicationsChangeStageCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsChangeStageCreateExpandedAsync(requestModel: ApplicationsApi.ApplicationsChangeStageCreateRequest): CompletableFuture<ApplicationResponse.Expanded> = GlobalScope.future {
        applicationsChangeStageCreateExpanded(requestModel)
    }

    private suspend inline fun <reified T> applicationsChangeStageCreateImpl(requestModel: ApplicationsApi.ApplicationsChangeStageCreateRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.updateApplicationStageRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.isDebugMode?.apply { localVariableQuery["is_debug_mode"] = listOf("$this") }
            requestModel.runAsync?.apply { localVariableQuery["run_async"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/applications/{id}/change-stage".replace("{" + "id" + "}", "${ requestModel.id }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Creates an &#x60;Application&#x60; object with the given values.
     * @param applicationEndpointRequest  
     * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional)
     * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
     * @return ApplicationResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsCreate(requestModel: ApplicationsApi.ApplicationsCreateRequest): ApplicationResponse {
        return applicationsCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsCreateAsync(requestModel: ApplicationsApi.ApplicationsCreateRequest): CompletableFuture<ApplicationResponse> = GlobalScope.future {
        applicationsCreate(requestModel)
    }

    /**
     * @param applicationEndpointRequest   * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional) * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsCreateExpanded(requestModel: ApplicationsApi.ApplicationsCreateRequest): ApplicationResponse.Expanded {
        return applicationsCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsCreateExpandedAsync(requestModel: ApplicationsApi.ApplicationsCreateRequest): CompletableFuture<ApplicationResponse.Expanded> = GlobalScope.future {
        applicationsCreateExpanded(requestModel)
    }

    private suspend inline fun <reified T> applicationsCreateImpl(requestModel: ApplicationsApi.ApplicationsCreateRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.applicationEndpointRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.isDebugMode?.apply { localVariableQuery["is_debug_mode"] = listOf("$this") }
            requestModel.runAsync?.apply { localVariableQuery["run_async"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/applications",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;Application&#x60; objects.
     * @param candidateId If provided, will only return applications for this candidate. (optional)
     * @param createdAfter If provided, will only return objects created after this datetime. (optional)
     * @param createdBefore If provided, will only return objects created before this datetime. (optional)
     * @param creditedToId If provided, will only return applications credited to this user. (optional)
     * @param currentStageId If provided, will only return applications at this interview stage. (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param jobId If provided, will only return applications for this job. (optional)
     * @param modifiedAfter If provided, only objects synced by Merge after this date time will be returned. (optional)
     * @param modifiedBefore If provided, only objects synced by Merge before this date time will be returned. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param rejectReasonId If provided, will only return applications with this reject reason. (optional)
     * @param remoteId The API provider&#39;s ID for the given object. (optional)
     * @param source If provided, will only return applications with this source. (optional)
     * @return PaginatedApplicationList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsList(requestModel: ApplicationsApi.ApplicationsListRequest): MergePaginatedResponse<Application> {
        return applicationsListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsListAsync(requestModel: ApplicationsApi.ApplicationsListRequest): CompletableFuture<MergePaginatedResponse<Application>> = GlobalScope.future {
        applicationsList(requestModel)
    }

    /**
     * @param candidateId If provided, will only return applications for this candidate. (optional) * @param createdAfter If provided, will only return objects created after this datetime. (optional) * @param createdBefore If provided, will only return objects created before this datetime. (optional) * @param creditedToId If provided, will only return applications credited to this user. (optional) * @param currentStageId If provided, will only return applications at this interview stage. (optional) * @param cursor The pagination cursor value. (optional) * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional) * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param jobId If provided, will only return applications for this job. (optional) * @param modifiedAfter If provided, only objects synced by Merge after this date time will be returned. (optional) * @param modifiedBefore If provided, only objects synced by Merge before this date time will be returned. (optional) * @param pageSize Number of results to return per page. (optional) * @param rejectReasonId If provided, will only return applications with this reject reason. (optional) * @param remoteId The API provider&#39;s ID for the given object. (optional) * @param source If provided, will only return applications with this source. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsListExpanded(requestModel: ApplicationsApi.ApplicationsListRequest): MergePaginatedResponse<Application.Expanded> {
        return applicationsListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsListExpandedAsync(requestModel: ApplicationsApi.ApplicationsListRequest): CompletableFuture<MergePaginatedResponse<Application.Expanded>> = GlobalScope.future {
        applicationsListExpanded(requestModel)
    }

    private suspend inline fun <reified T> applicationsListImpl(requestModel: ApplicationsApi.ApplicationsListRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.candidateId?.apply { localVariableQuery["candidate_id"] = listOf(this) }
            requestModel.createdAfter?.apply { localVariableQuery["created_after"] = listOf("$this") }
            requestModel.createdBefore?.apply { localVariableQuery["created_before"] = listOf("$this") }
            requestModel.creditedToId?.apply { localVariableQuery["credited_to_id"] = listOf(this) }
            requestModel.currentStageId?.apply { localVariableQuery["current_stage_id"] = listOf(this) }
            requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf(this) }
            requestModel.expand?.apply { localVariableQuery["expand"] = listOf(this) }
            requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$this") }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.jobId?.apply { localVariableQuery["job_id"] = listOf(this) }
            requestModel.modifiedAfter?.apply { localVariableQuery["modified_after"] = listOf("$this") }
            requestModel.modifiedBefore?.apply { localVariableQuery["modified_before"] = listOf("$this") }
            requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$this") }
            requestModel.rejectReasonId?.apply { localVariableQuery["reject_reason_id"] = listOf(this) }
            requestModel.remoteId?.apply { localVariableQuery["remote_id"] = listOf(this) }
            requestModel.source?.apply { localVariableQuery["source"] = listOf(this) }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/applications",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns metadata for &#x60;Application&#x60; POSTs.
     * @param applicationRemoteTemplateId The template ID associated with the nested application in the request. (optional)
     * @return MetaResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsMetaPostRetrieve(requestModel: ApplicationsApi.ApplicationsMetaPostRetrieveRequest): MetaResponse {
        return applicationsMetaPostRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsMetaPostRetrieveAsync(requestModel: ApplicationsApi.ApplicationsMetaPostRetrieveRequest): CompletableFuture<MetaResponse> = GlobalScope.future {
        applicationsMetaPostRetrieve(requestModel)
    }

    /**
     * @param applicationRemoteTemplateId The template ID associated with the nested application in the request. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsMetaPostRetrieveExpanded(requestModel: ApplicationsApi.ApplicationsMetaPostRetrieveRequest): MetaResponse.Expanded {
        return applicationsMetaPostRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsMetaPostRetrieveExpandedAsync(requestModel: ApplicationsApi.ApplicationsMetaPostRetrieveRequest): CompletableFuture<MetaResponse.Expanded> = GlobalScope.future {
        applicationsMetaPostRetrieveExpanded(requestModel)
    }

    private suspend inline fun <reified T> applicationsMetaPostRetrieveImpl(requestModel: ApplicationsApi.ApplicationsMetaPostRetrieveRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.applicationRemoteTemplateId?.apply { localVariableQuery["application_remote_template_id"] = listOf(this) }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/applications/meta/post",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns an &#x60;Application&#x60; object with the given &#x60;id&#x60;.
     * @param id  
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @return Application
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsRetrieve(requestModel: ApplicationsApi.ApplicationsRetrieveRequest): Application {
        return applicationsRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsRetrieveAsync(requestModel: ApplicationsApi.ApplicationsRetrieveRequest): CompletableFuture<Application> = GlobalScope.future {
        applicationsRetrieve(requestModel)
    }

    /**
     * @param id   * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationsRetrieveExpanded(requestModel: ApplicationsApi.ApplicationsRetrieveRequest): Application.Expanded {
        return applicationsRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun applicationsRetrieveExpandedAsync(requestModel: ApplicationsApi.ApplicationsRetrieveRequest): CompletableFuture<Application.Expanded> = GlobalScope.future {
        applicationsRetrieveExpanded(requestModel)
    }

    private suspend inline fun <reified T> applicationsRetrieveImpl(requestModel: ApplicationsApi.ApplicationsRetrieveRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.expand?.apply { localVariableQuery["expand"] = listOf(this) }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/applications/{id}".replace("{" + "id" + "}", "${ requestModel.id }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

}
