/**
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.crm.models

import dev.merge.client.crm.models.OpportunityStatusEnum
import dev.merge.client.shared.RemoteData

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The Opportunity Object ### Description The `Opportunity` object is used to represent an opportunity in the remote system. ### Usage Example TODO
 *
 * @param id 
 * @param remoteId The third-party API ID of the matching object.
 * @param name The opportunity's name.
 * @param description The opportunity's description.
 * @param amount The opportunity's amount.
 * @param owner The opportunity's owner.
 * @param account The account of the opportunity.
 * @param stage The stage of the opportunity.
 * @param status The opportunity's status.
 * @param lastActivityAt When the opportunity's last activity occurred.
 * @param closeDate When the opportunity was closed.
 * @param remoteCreatedAt When the third party's opportunity was created.
 * @param remoteData 
 * @param remoteWasDeleted 
 * @param fieldMappings 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class Opportunity (

    @field:JsonProperty("id")
    val id: java.util.UUID? = null,

    /* The third-party API ID of the matching object. */
    @field:JsonProperty("remote_id")
    val remoteId: kotlin.String? = null,

    /* The opportunity's name. */
    @field:JsonProperty("name")
    val name: kotlin.String? = null,

    /* The opportunity's description. */
    @field:JsonProperty("description")
    val description: kotlin.String? = null,

    /* The opportunity's amount. */
    @field:JsonProperty("amount")
    val amount: kotlin.Int? = null,

    /* The opportunity's owner. */
    @field:JsonProperty("owner")
    val owner: java.util.UUID? = null,

    /* The account of the opportunity. */
    @field:JsonProperty("account")
    val account: java.util.UUID? = null,

    /* The stage of the opportunity. */
    @field:JsonProperty("stage")
    val stage: java.util.UUID? = null,

    /* The opportunity's status. */
    @field:JsonProperty("status")
    val status: OpportunityStatusEnum? = null,

    /* When the opportunity's last activity occurred. */
    @field:JsonProperty("last_activity_at")
    val lastActivityAt: java.time.OffsetDateTime? = null,

    /* When the opportunity was closed. */
    @field:JsonProperty("close_date")
    val closeDate: java.time.OffsetDateTime? = null,

    /* When the third party's opportunity was created. */
    @field:JsonProperty("remote_created_at")
    val remoteCreatedAt: java.time.OffsetDateTime? = null,

    @field:JsonProperty("remote_data")
    val remoteData: kotlin.collections.List<RemoteData>? = null,

    @field:JsonProperty("remote_was_deleted")
    val remoteWasDeleted: kotlin.Boolean? = null,

    @field:JsonProperty("field_mappings")
    val fieldMappings: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("id")
        val id: JsonNode?,

        @field:JsonProperty("remote_id")
        val remoteId: JsonNode?,

        @field:JsonProperty("name")
        val name: JsonNode?,

        @field:JsonProperty("description")
        val description: JsonNode?,

        @field:JsonProperty("amount")
        val amount: JsonNode?,

        @field:JsonProperty("owner")
        val owner: JsonNode?,

        @field:JsonProperty("account")
        val account: JsonNode?,

        @field:JsonProperty("stage")
        val stage: JsonNode?,

        @field:JsonProperty("status")
        val status: JsonNode?,

        @field:JsonProperty("last_activity_at")
        val lastActivityAt: JsonNode?,

        @field:JsonProperty("close_date")
        val closeDate: JsonNode?,

        @field:JsonProperty("remote_created_at")
        val remoteCreatedAt: JsonNode?,

        @field:JsonProperty("remote_data")
        val remoteData: kotlin.collections.List<JsonNode>?,

        @field:JsonProperty("remote_was_deleted")
        val remoteWasDeleted: JsonNode?,

        @field:JsonProperty("field_mappings")
        val fieldMappings: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: Opportunity.Expanded): Opportunity {
            return Opportunity(
                id = ApiClient.jsonConvertSafe(expanded.id),
                remoteId = ApiClient.jsonConvertSafe(expanded.remoteId),
                name = ApiClient.jsonConvertSafe(expanded.name),
                description = ApiClient.jsonConvertSafe(expanded.description),
                amount = ApiClient.jsonConvertSafe(expanded.amount),
                owner = ApiClient.jsonConvertSafe(expanded.owner),
                account = ApiClient.jsonConvertSafe(expanded.account),
                stage = ApiClient.jsonConvertSafe(expanded.stage),
                status = ApiClient.jsonConvertSafe(expanded.status),
                lastActivityAt = ApiClient.jsonConvertSafe(expanded.lastActivityAt),
                closeDate = ApiClient.jsonConvertSafe(expanded.closeDate),
                remoteCreatedAt = ApiClient.jsonConvertSafe(expanded.remoteCreatedAt),
                remoteData = ApiClient.jsonConvertSafe(expanded.remoteData),
                remoteWasDeleted = ApiClient.jsonConvertSafe(expanded.remoteWasDeleted),
                fieldMappings = ApiClient.jsonConvertSafe(expanded.fieldMappings)
            )
        }
    }
}

