/**
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.crm.models

import dev.merge.client.crm.models.RemoteFieldRequest

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The Note Object ### Description The `Note` object is used to represent a note on another object. ### Usage Example TODO
 *
 * @param owner The note's owner.
 * @param content The note's content.
 * @param contact The note's contact.
 * @param account The note's account.
 * @param opportunity The note's opportunity.
 * @param integrationParams 
 * @param linkedAccountParams 
 * @param remoteFields 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class NoteRequest (

    /* The note's owner. */
    @field:JsonProperty("owner")
    val owner: java.util.UUID? = null,

    /* The note's content. */
    @field:JsonProperty("content")
    val content: kotlin.String? = null,

    /* The note's contact. */
    @field:JsonProperty("contact")
    val contact: java.util.UUID? = null,

    /* The note's account. */
    @field:JsonProperty("account")
    val account: java.util.UUID? = null,

    /* The note's opportunity. */
    @field:JsonProperty("opportunity")
    val opportunity: java.util.UUID? = null,

    @field:JsonProperty("integration_params")
    val integrationParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("linked_account_params")
    val linkedAccountParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("remote_fields")
    val remoteFields: kotlin.collections.List<RemoteFieldRequest>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("owner")
        val owner: JsonNode?,

        @field:JsonProperty("content")
        val content: JsonNode?,

        @field:JsonProperty("contact")
        val contact: JsonNode?,

        @field:JsonProperty("account")
        val account: JsonNode?,

        @field:JsonProperty("opportunity")
        val opportunity: JsonNode?,

        @field:JsonProperty("integration_params")
        val integrationParams: JsonNode?,

        @field:JsonProperty("linked_account_params")
        val linkedAccountParams: JsonNode?,

        @field:JsonProperty("remote_fields")
        val remoteFields: kotlin.collections.List<JsonNode>?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: NoteRequest.Expanded): NoteRequest {
            return NoteRequest(
                owner = ApiClient.jsonConvertSafe(expanded.owner),
                content = ApiClient.jsonConvertSafe(expanded.content),
                contact = ApiClient.jsonConvertSafe(expanded.contact),
                account = ApiClient.jsonConvertSafe(expanded.account),
                opportunity = ApiClient.jsonConvertSafe(expanded.opportunity),
                integrationParams = ApiClient.jsonConvertSafe(expanded.integrationParams),
                linkedAccountParams = ApiClient.jsonConvertSafe(expanded.linkedAccountParams),
                remoteFields = ApiClient.jsonConvertSafe(expanded.remoteFields)
            )
        }
    }
}

