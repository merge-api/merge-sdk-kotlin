/**
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.crm.models

import dev.merge.client.crm.models.LinkedAccountStatus

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * 
 *
 * @param requestSchema 
 * @param hasConditionalParams 
 * @param hasRequiredLinkedAccountParams 
 * @param remoteFieldClasses 
 * @param status 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class MetaResponse (

    @field:JsonProperty("request_schema")
    val requestSchema: kotlin.collections.Map<kotlin.String, kotlin.Any>,

    @field:JsonProperty("has_conditional_params")
    val hasConditionalParams: kotlin.Boolean,

    @field:JsonProperty("has_required_linked_account_params")
    val hasRequiredLinkedAccountParams: kotlin.Boolean,

    @field:JsonProperty("remote_field_classes")
    val remoteFieldClasses: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("status")
    val status: LinkedAccountStatus? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("request_schema")
        val requestSchema: JsonNode,

        @field:JsonProperty("has_conditional_params")
        val hasConditionalParams: JsonNode,

        @field:JsonProperty("has_required_linked_account_params")
        val hasRequiredLinkedAccountParams: JsonNode,

        @field:JsonProperty("remote_field_classes")
        val remoteFieldClasses: JsonNode?,

        @field:JsonProperty("status")
        val status: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: MetaResponse.Expanded): MetaResponse {
            return MetaResponse(
                requestSchema = ApiClient.jsonConvertRequiredSafe(expanded.requestSchema),
                hasConditionalParams = ApiClient.jsonConvertRequiredSafe(expanded.hasConditionalParams),
                hasRequiredLinkedAccountParams = ApiClient.jsonConvertRequiredSafe(expanded.hasRequiredLinkedAccountParams),
                remoteFieldClasses = ApiClient.jsonConvertSafe(expanded.remoteFieldClasses),
                status = ApiClient.jsonConvertSafe(expanded.status)
            )
        }
    }
}

