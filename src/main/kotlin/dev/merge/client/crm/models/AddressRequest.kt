/**
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.crm.models

import dev.merge.client.crm.models.AddressTypeEnum
import dev.merge.client.crm.models.CountryEnum

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The Address Object ### Description The `Address` object is used to represent an entity's address. ### Usage Example TODO
 *
 * @param street1 Line 1 of the address's street.
 * @param street2 Line 2 of the address's street.
 * @param city The address's city.
 * @param state The address's state.
 * @param postalCode The address's postal code.
 * @param country The address's country.
 * @param addressType The address type.
 * @param integrationParams 
 * @param linkedAccountParams 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class AddressRequest (

    /* Line 1 of the address's street. */
    @field:JsonProperty("street_1")
    val street1: kotlin.String? = null,

    /* Line 2 of the address's street. */
    @field:JsonProperty("street_2")
    val street2: kotlin.String? = null,

    /* The address's city. */
    @field:JsonProperty("city")
    val city: kotlin.String? = null,

    /* The address's state. */
    @field:JsonProperty("state")
    val state: kotlin.String? = null,

    /* The address's postal code. */
    @field:JsonProperty("postal_code")
    val postalCode: kotlin.String? = null,

    /* The address's country. */
    @field:JsonProperty("country")
    val country: CountryEnum? = null,

    /* The address type. */
    @field:JsonProperty("address_type")
    val addressType: AddressTypeEnum? = null,

    @field:JsonProperty("integration_params")
    val integrationParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("linked_account_params")
    val linkedAccountParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("street_1")
        val street1: JsonNode?,

        @field:JsonProperty("street_2")
        val street2: JsonNode?,

        @field:JsonProperty("city")
        val city: JsonNode?,

        @field:JsonProperty("state")
        val state: JsonNode?,

        @field:JsonProperty("postal_code")
        val postalCode: JsonNode?,

        @field:JsonProperty("country")
        val country: JsonNode?,

        @field:JsonProperty("address_type")
        val addressType: JsonNode?,

        @field:JsonProperty("integration_params")
        val integrationParams: JsonNode?,

        @field:JsonProperty("linked_account_params")
        val linkedAccountParams: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: AddressRequest.Expanded): AddressRequest {
            return AddressRequest(
                street1 = ApiClient.jsonConvertSafe(expanded.street1),
                street2 = ApiClient.jsonConvertSafe(expanded.street2),
                city = ApiClient.jsonConvertSafe(expanded.city),
                state = ApiClient.jsonConvertSafe(expanded.state),
                postalCode = ApiClient.jsonConvertSafe(expanded.postalCode),
                country = ApiClient.jsonConvertSafe(expanded.country),
                addressType = ApiClient.jsonConvertSafe(expanded.addressType),
                integrationParams = ApiClient.jsonConvertSafe(expanded.integrationParams),
                linkedAccountParams = ApiClient.jsonConvertSafe(expanded.linkedAccountParams)
            )
        }
    }
}

