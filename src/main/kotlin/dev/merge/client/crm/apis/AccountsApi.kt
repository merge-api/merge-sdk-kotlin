/**
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.crm.apis

import dev.merge.client.crm.models.Account
import dev.merge.client.crm.models.CRMAccountEndpointRequest
import dev.merge.client.crm.models.CRMAccountResponse
import dev.merge.client.crm.models.MetaResponse
import dev.merge.client.crm.models.RemoteFieldClass
import dev.merge.client.crm.models.PatchedCRMAccountEndpointRequest

import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.serialization.jackson.jackson
import io.ktor.client.call.body
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.future.future
import java.util.concurrent.CompletableFuture

import com.fasterxml.jackson.databind.ObjectMapper

import dev.merge.client.shared.*

open class AccountsApi(
baseUrl: String = ApiClient.BASE_URL + "crm/v1",
httpClientEngine: HttpClientEngine? = null,
httpClientConfig: (HttpClientConfig<*>.() -> Unit)? = null,
json: ObjectMapper = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, json) {

    data class AccountsCreateRequest (
        val crMAccountEndpointRequest: CRMAccountEndpointRequest,
        val isDebugMode: kotlin.Boolean? = null,
        val runAsync: kotlin.Boolean? = null
    )

    data class AccountsListRequest (
        val createdAfter: java.time.OffsetDateTime? = null,
        val createdBefore: java.time.OffsetDateTime? = null,
        val cursor: kotlin.String? = null,
        val expand: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val includeRemoteFields: kotlin.Boolean? = null,
        val modifiedAfter: java.time.OffsetDateTime? = null,
        val modifiedBefore: java.time.OffsetDateTime? = null,
        val ownerId: kotlin.String? = null,
        val pageSize: kotlin.Int? = null,
        val remoteId: kotlin.String? = null
    )

    data class AccountsMetaPatchRetrieveRequest (
        val id: java.util.UUID
    )

    data class AccountsPartialUpdateRequest (
        val id: java.util.UUID,
        val patchedCRMAccountEndpointRequest: PatchedCRMAccountEndpointRequest,
        val isDebugMode: kotlin.Boolean? = null,
        val runAsync: kotlin.Boolean? = null
    )

    data class AccountsRemoteFieldClassesListRequest (
        val cursor: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val includeRemoteFields: kotlin.Boolean? = null,
        val pageSize: kotlin.Int? = null
    )

    data class AccountsRetrieveRequest (
        val id: java.util.UUID,
        val expand: kotlin.String? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val includeRemoteFields: kotlin.Boolean? = null
    )

    /**
    * 
    * Creates an &#x60;Account&#x60; object with the given values.
     * @param crMAccountEndpointRequest  
     * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional)
     * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
     * @return CRMAccountResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsCreate(requestModel: AccountsApi.AccountsCreateRequest): CRMAccountResponse {
        return accountsCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsCreateAsync(requestModel: AccountsApi.AccountsCreateRequest): CompletableFuture<CRMAccountResponse> = GlobalScope.future {
        accountsCreate(requestModel)
    }

    /**
     * @param crMAccountEndpointRequest   * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional) * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsCreateExpanded(requestModel: AccountsApi.AccountsCreateRequest): CRMAccountResponse.Expanded {
        return accountsCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsCreateExpandedAsync(requestModel: AccountsApi.AccountsCreateRequest): CompletableFuture<CRMAccountResponse.Expanded> = GlobalScope.future {
        accountsCreateExpanded(requestModel)
    }

    private suspend inline fun <reified T> accountsCreateImpl(requestModel: AccountsApi.AccountsCreateRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.crMAccountEndpointRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.isDebugMode?.apply { localVariableQuery["is_debug_mode"] = listOf("$this") }
            requestModel.runAsync?.apply { localVariableQuery["run_async"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/accounts",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;Account&#x60; objects.
     * @param createdAfter If provided, will only return objects created after this datetime. (optional)
     * @param createdBefore If provided, will only return objects created before this datetime. (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional)
     * @param modifiedAfter If provided, only objects synced by Merge after this date time will be returned. (optional)
     * @param modifiedBefore If provided, only objects synced by Merge before this date time will be returned. (optional)
     * @param ownerId If provided, will only return accounts with this owner. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param remoteId The API provider&#39;s ID for the given object. (optional)
     * @return PaginatedAccountList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsList(requestModel: AccountsApi.AccountsListRequest): MergePaginatedResponse<Account> {
        return accountsListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsListAsync(requestModel: AccountsApi.AccountsListRequest): CompletableFuture<MergePaginatedResponse<Account>> = GlobalScope.future {
        accountsList(requestModel)
    }

    /**
     * @param createdAfter If provided, will only return objects created after this datetime. (optional) * @param createdBefore If provided, will only return objects created before this datetime. (optional) * @param cursor The pagination cursor value. (optional) * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional) * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional) * @param modifiedAfter If provided, only objects synced by Merge after this date time will be returned. (optional) * @param modifiedBefore If provided, only objects synced by Merge before this date time will be returned. (optional) * @param ownerId If provided, will only return accounts with this owner. (optional) * @param pageSize Number of results to return per page. (optional) * @param remoteId The API provider&#39;s ID for the given object. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsListExpanded(requestModel: AccountsApi.AccountsListRequest): MergePaginatedResponse<Account.Expanded> {
        return accountsListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsListExpandedAsync(requestModel: AccountsApi.AccountsListRequest): CompletableFuture<MergePaginatedResponse<Account.Expanded>> = GlobalScope.future {
        accountsListExpanded(requestModel)
    }

    private suspend inline fun <reified T> accountsListImpl(requestModel: AccountsApi.AccountsListRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.createdAfter?.apply { localVariableQuery["created_after"] = listOf("$this") }
            requestModel.createdBefore?.apply { localVariableQuery["created_before"] = listOf("$this") }
            requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf(this) }
            requestModel.expand?.apply { localVariableQuery["expand"] = listOf(this) }
            requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$this") }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.includeRemoteFields?.apply { localVariableQuery["include_remote_fields"] = listOf("$this") }
            requestModel.modifiedAfter?.apply { localVariableQuery["modified_after"] = listOf("$this") }
            requestModel.modifiedBefore?.apply { localVariableQuery["modified_before"] = listOf("$this") }
            requestModel.ownerId?.apply { localVariableQuery["owner_id"] = listOf(this) }
            requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$this") }
            requestModel.remoteId?.apply { localVariableQuery["remote_id"] = listOf(this) }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/accounts",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns metadata for &#x60;CRMAccount&#x60; PATCHs.
     * @param id  
     * @return MetaResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsMetaPatchRetrieve(requestModel: AccountsApi.AccountsMetaPatchRetrieveRequest): MetaResponse {
        return accountsMetaPatchRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsMetaPatchRetrieveAsync(requestModel: AccountsApi.AccountsMetaPatchRetrieveRequest): CompletableFuture<MetaResponse> = GlobalScope.future {
        accountsMetaPatchRetrieve(requestModel)
    }

    /**
     * @param id  
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsMetaPatchRetrieveExpanded(requestModel: AccountsApi.AccountsMetaPatchRetrieveRequest): MetaResponse.Expanded {
        return accountsMetaPatchRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsMetaPatchRetrieveExpandedAsync(requestModel: AccountsApi.AccountsMetaPatchRetrieveRequest): CompletableFuture<MetaResponse.Expanded> = GlobalScope.future {
        accountsMetaPatchRetrieveExpanded(requestModel)
    }

    private suspend inline fun <reified T> accountsMetaPatchRetrieveImpl(requestModel: AccountsApi.AccountsMetaPatchRetrieveRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/accounts/meta/patch/{id}".replace("{" + "id" + "}", "${ requestModel.id }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns metadata for &#x60;CRMAccount&#x60; POSTs.
     * @return MetaResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsMetaPostRetrieve(): MetaResponse {
        return accountsMetaPostRetrieveImpl()
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsMetaPostRetrieveAsync(): CompletableFuture<MetaResponse> = GlobalScope.future {
        accountsMetaPostRetrieve()
    }

    /**
    
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsMetaPostRetrieveExpanded(): MetaResponse.Expanded {
        return accountsMetaPostRetrieveImpl()
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsMetaPostRetrieveExpandedAsync(): CompletableFuture<MetaResponse.Expanded> = GlobalScope.future {
        accountsMetaPostRetrieveExpanded()
    }

    private suspend inline fun <reified T> accountsMetaPostRetrieveImpl(): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/accounts/meta/post",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Updates an &#x60;Account&#x60; object with the given &#x60;id&#x60;.
     * @param id  
     * @param patchedCRMAccountEndpointRequest  
     * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional)
     * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
     * @return CRMAccountResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsPartialUpdate(requestModel: AccountsApi.AccountsPartialUpdateRequest): CRMAccountResponse {
        return accountsPartialUpdateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsPartialUpdateAsync(requestModel: AccountsApi.AccountsPartialUpdateRequest): CompletableFuture<CRMAccountResponse> = GlobalScope.future {
        accountsPartialUpdate(requestModel)
    }

    /**
     * @param id   * @param patchedCRMAccountEndpointRequest   * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional) * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsPartialUpdateExpanded(requestModel: AccountsApi.AccountsPartialUpdateRequest): CRMAccountResponse.Expanded {
        return accountsPartialUpdateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsPartialUpdateExpandedAsync(requestModel: AccountsApi.AccountsPartialUpdateRequest): CompletableFuture<CRMAccountResponse.Expanded> = GlobalScope.future {
        accountsPartialUpdateExpanded(requestModel)
    }

    private suspend inline fun <reified T> accountsPartialUpdateImpl(requestModel: AccountsApi.AccountsPartialUpdateRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.patchedCRMAccountEndpointRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.isDebugMode?.apply { localVariableQuery["is_debug_mode"] = listOf("$this") }
            requestModel.runAsync?.apply { localVariableQuery["run_async"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.PATCH,
        "/accounts/{id}".replace("{" + "id" + "}", "${ requestModel.id }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;RemoteFieldClass&#x60; objects.
     * @param cursor The pagination cursor value. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return PaginatedRemoteFieldClassList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsRemoteFieldClassesList(requestModel: AccountsApi.AccountsRemoteFieldClassesListRequest): MergePaginatedResponse<RemoteFieldClass> {
        return accountsRemoteFieldClassesListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsRemoteFieldClassesListAsync(requestModel: AccountsApi.AccountsRemoteFieldClassesListRequest): CompletableFuture<MergePaginatedResponse<RemoteFieldClass>> = GlobalScope.future {
        accountsRemoteFieldClassesList(requestModel)
    }

    /**
     * @param cursor The pagination cursor value. (optional) * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional) * @param pageSize Number of results to return per page. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsRemoteFieldClassesListExpanded(requestModel: AccountsApi.AccountsRemoteFieldClassesListRequest): MergePaginatedResponse<RemoteFieldClass.Expanded> {
        return accountsRemoteFieldClassesListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsRemoteFieldClassesListExpandedAsync(requestModel: AccountsApi.AccountsRemoteFieldClassesListRequest): CompletableFuture<MergePaginatedResponse<RemoteFieldClass.Expanded>> = GlobalScope.future {
        accountsRemoteFieldClassesListExpanded(requestModel)
    }

    private suspend inline fun <reified T> accountsRemoteFieldClassesListImpl(requestModel: AccountsApi.AccountsRemoteFieldClassesListRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf(this) }
            requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$this") }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.includeRemoteFields?.apply { localVariableQuery["include_remote_fields"] = listOf("$this") }
            requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/accounts/remote-field-classes",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns an &#x60;Account&#x60; object with the given &#x60;id&#x60;.
     * @param id  
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional)
     * @return Account
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsRetrieve(requestModel: AccountsApi.AccountsRetrieveRequest): Account {
        return accountsRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsRetrieveAsync(requestModel: AccountsApi.AccountsRetrieveRequest): CompletableFuture<Account> = GlobalScope.future {
        accountsRetrieve(requestModel)
    }

    /**
     * @param id   * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsRetrieveExpanded(requestModel: AccountsApi.AccountsRetrieveRequest): Account.Expanded {
        return accountsRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun accountsRetrieveExpandedAsync(requestModel: AccountsApi.AccountsRetrieveRequest): CompletableFuture<Account.Expanded> = GlobalScope.future {
        accountsRetrieveExpanded(requestModel)
    }

    private suspend inline fun <reified T> accountsRetrieveImpl(requestModel: AccountsApi.AccountsRetrieveRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.expand?.apply { localVariableQuery["expand"] = listOf(this) }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.includeRemoteFields?.apply { localVariableQuery["include_remote_fields"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/accounts/{id}".replace("{" + "id" + "}", "${ requestModel.id }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

}
