/**
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.crm.apis

import dev.merge.client.crm.models.IgnoreCommonModel
import dev.merge.client.crm.models.IgnoreCommonModelRequest
import dev.merge.client.crm.models.RemoteFieldClass
import dev.merge.client.crm.models.User

import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.serialization.jackson.jackson
import io.ktor.client.call.body
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.future.future
import java.util.concurrent.CompletableFuture

import com.fasterxml.jackson.databind.ObjectMapper

import dev.merge.client.shared.*

open class UsersApi(
baseUrl: String = ApiClient.BASE_URL + "crm/v1",
httpClientEngine: HttpClientEngine? = null,
httpClientConfig: (HttpClientConfig<*>.() -> Unit)? = null,
json: ObjectMapper = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, json) {

    data class UsersIgnoreCreateRequest (
        val modelId: java.util.UUID,
        val ignoreCommonModelRequest: IgnoreCommonModelRequest
    )

    data class UsersListRequest (
        val createdAfter: java.time.OffsetDateTime? = null,
        val createdBefore: java.time.OffsetDateTime? = null,
        val cursor: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val includeRemoteFields: kotlin.Boolean? = null,
        val modifiedAfter: java.time.OffsetDateTime? = null,
        val modifiedBefore: java.time.OffsetDateTime? = null,
        val pageSize: kotlin.Int? = null,
        val remoteId: kotlin.String? = null
    )

    data class UsersRemoteFieldClassesListRequest (
        val cursor: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val includeRemoteFields: kotlin.Boolean? = null,
        val pageSize: kotlin.Int? = null
    )

    data class UsersRetrieveRequest (
        val id: java.util.UUID,
        val includeRemoteData: kotlin.Boolean? = null,
        val includeRemoteFields: kotlin.Boolean? = null
    )

    /**
    * 
    * Ignores a specific row based on the &#x60;model_id&#x60; in the url. These records will have their properties set to null, and will not be updated in future syncs. The \&quot;reason\&quot; and \&quot;message\&quot; fields in the request body will be stored for audit purposes.
     * @param modelId  
     * @param ignoreCommonModelRequest  
     * @return IgnoreCommonModel
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersIgnoreCreate(requestModel: UsersApi.UsersIgnoreCreateRequest): IgnoreCommonModel {
        return usersIgnoreCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun usersIgnoreCreateAsync(requestModel: UsersApi.UsersIgnoreCreateRequest): CompletableFuture<IgnoreCommonModel> = GlobalScope.future {
        usersIgnoreCreate(requestModel)
    }

    /**
     * @param modelId   * @param ignoreCommonModelRequest  
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersIgnoreCreateExpanded(requestModel: UsersApi.UsersIgnoreCreateRequest): IgnoreCommonModel.Expanded {
        return usersIgnoreCreateImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun usersIgnoreCreateExpandedAsync(requestModel: UsersApi.UsersIgnoreCreateRequest): CompletableFuture<IgnoreCommonModel.Expanded> = GlobalScope.future {
        usersIgnoreCreateExpanded(requestModel)
    }

    private suspend inline fun <reified T> usersIgnoreCreateImpl(requestModel: UsersApi.UsersIgnoreCreateRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.ignoreCommonModelRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/users/ignore/{model_id}".replace("{" + "model_id" + "}", "${ requestModel.modelId }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;User&#x60; objects.
     * @param createdAfter If provided, will only return objects created after this datetime. (optional)
     * @param createdBefore If provided, will only return objects created before this datetime. (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional)
     * @param modifiedAfter If provided, will only return objects modified after this datetime. (optional)
     * @param modifiedBefore If provided, will only return objects modified before this datetime. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param remoteId The API provider&#39;s ID for the given object. (optional)
     * @return PaginatedUserList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersList(requestModel: UsersApi.UsersListRequest): MergePaginatedResponse<User> {
        return usersListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun usersListAsync(requestModel: UsersApi.UsersListRequest): CompletableFuture<MergePaginatedResponse<User>> = GlobalScope.future {
        usersList(requestModel)
    }

    /**
     * @param createdAfter If provided, will only return objects created after this datetime. (optional) * @param createdBefore If provided, will only return objects created before this datetime. (optional) * @param cursor The pagination cursor value. (optional) * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional) * @param modifiedAfter If provided, will only return objects modified after this datetime. (optional) * @param modifiedBefore If provided, will only return objects modified before this datetime. (optional) * @param pageSize Number of results to return per page. (optional) * @param remoteId The API provider&#39;s ID for the given object. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersListExpanded(requestModel: UsersApi.UsersListRequest): MergePaginatedResponse<User.Expanded> {
        return usersListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun usersListExpandedAsync(requestModel: UsersApi.UsersListRequest): CompletableFuture<MergePaginatedResponse<User.Expanded>> = GlobalScope.future {
        usersListExpanded(requestModel)
    }

    private suspend inline fun <reified T> usersListImpl(requestModel: UsersApi.UsersListRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.createdAfter?.apply { localVariableQuery["created_after"] = listOf("$this") }
            requestModel.createdBefore?.apply { localVariableQuery["created_before"] = listOf("$this") }
            requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf(this) }
            requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$this") }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.includeRemoteFields?.apply { localVariableQuery["include_remote_fields"] = listOf("$this") }
            requestModel.modifiedAfter?.apply { localVariableQuery["modified_after"] = listOf("$this") }
            requestModel.modifiedBefore?.apply { localVariableQuery["modified_before"] = listOf("$this") }
            requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$this") }
            requestModel.remoteId?.apply { localVariableQuery["remote_id"] = listOf(this) }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/users",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;RemoteFieldClass&#x60; objects.
     * @param cursor The pagination cursor value. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return PaginatedRemoteFieldClassList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersRemoteFieldClassesList(requestModel: UsersApi.UsersRemoteFieldClassesListRequest): MergePaginatedResponse<RemoteFieldClass> {
        return usersRemoteFieldClassesListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun usersRemoteFieldClassesListAsync(requestModel: UsersApi.UsersRemoteFieldClassesListRequest): CompletableFuture<MergePaginatedResponse<RemoteFieldClass>> = GlobalScope.future {
        usersRemoteFieldClassesList(requestModel)
    }

    /**
     * @param cursor The pagination cursor value. (optional) * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional) * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional) * @param pageSize Number of results to return per page. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersRemoteFieldClassesListExpanded(requestModel: UsersApi.UsersRemoteFieldClassesListRequest): MergePaginatedResponse<RemoteFieldClass.Expanded> {
        return usersRemoteFieldClassesListImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun usersRemoteFieldClassesListExpandedAsync(requestModel: UsersApi.UsersRemoteFieldClassesListRequest): CompletableFuture<MergePaginatedResponse<RemoteFieldClass.Expanded>> = GlobalScope.future {
        usersRemoteFieldClassesListExpanded(requestModel)
    }

    private suspend inline fun <reified T> usersRemoteFieldClassesListImpl(requestModel: UsersApi.UsersRemoteFieldClassesListRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf(this) }
            requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$this") }
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.includeRemoteFields?.apply { localVariableQuery["include_remote_fields"] = listOf("$this") }
            requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/users/remote-field-classes",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a &#x60;User&#x60; object with the given &#x60;id&#x60;.
     * @param id  
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional)
     * @return User
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersRetrieve(requestModel: UsersApi.UsersRetrieveRequest): User {
        return usersRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun usersRetrieveAsync(requestModel: UsersApi.UsersRetrieveRequest): CompletableFuture<User> = GlobalScope.future {
        usersRetrieve(requestModel)
    }

    /**
     * @param id   * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional) * @param includeRemoteFields Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format. (optional)
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersRetrieveExpanded(requestModel: UsersApi.UsersRetrieveRequest): User.Expanded {
        return usersRetrieveImpl(requestModel)
    }

    @Suppress("UNCHECKED_CAST")
    open fun usersRetrieveExpandedAsync(requestModel: UsersApi.UsersRetrieveRequest): CompletableFuture<User.Expanded> = GlobalScope.future {
        usersRetrieveExpanded(requestModel)
    }

    private suspend inline fun <reified T> usersRetrieveImpl(requestModel: UsersApi.UsersRetrieveRequest): T {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
            requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$this") }
            requestModel.includeRemoteFields?.apply { localVariableQuery["include_remote_fields"] = listOf("$this") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/users/{id}".replace("{" + "id" + "}", "${ requestModel.id }"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

}
