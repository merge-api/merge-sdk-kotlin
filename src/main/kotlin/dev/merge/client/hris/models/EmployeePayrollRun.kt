/**
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.hris.models

import dev.merge.client.hris.models.Deduction
import dev.merge.client.hris.models.Earning
import dev.merge.client.shared.RemoteData
import dev.merge.client.hris.models.Tax

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The EmployeePayrollRun Object ### Description The `EmployeePayrollRun` object is used to represent an employee's pay statement for a specific payroll run.  ### Usage Example Fetch from the `LIST EmployeePayrollRun` endpoint and filter by `ID` to show all employee payroll runs.
 *
 * @param id 
 * @param remoteId The third-party API ID of the matching object.
 * @param employee The employee whose payroll is being run.
 * @param payrollRun The payroll being run.
 * @param grossPay The total earnings throughout a given period for an employee before any deductions are made.
 * @param netPay The take-home pay throughout a given period for an employee after deductions are made.
 * @param startDate The day and time the payroll run started.
 * @param endDate The day and time the payroll run ended.
 * @param checkDate The day and time the payroll run was checked.
 * @param earnings 
 * @param deductions 
 * @param taxes 
 * @param remoteWasDeleted Indicates whether or not this object has been deleted by third party webhooks.
 * @param fieldMappings 
 * @param remoteData 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class EmployeePayrollRun (

    @field:JsonProperty("id")
    val id: java.util.UUID? = null,

    /* The third-party API ID of the matching object. */
    @field:JsonProperty("remote_id")
    val remoteId: kotlin.String? = null,

    /* The employee whose payroll is being run. */
    @field:JsonProperty("employee")
    val employee: java.util.UUID? = null,

    /* The payroll being run. */
    @field:JsonProperty("payroll_run")
    val payrollRun: java.util.UUID? = null,

    /* The total earnings throughout a given period for an employee before any deductions are made. */
    @field:JsonProperty("gross_pay")
    val grossPay: kotlin.Float? = null,

    /* The take-home pay throughout a given period for an employee after deductions are made. */
    @field:JsonProperty("net_pay")
    val netPay: kotlin.Float? = null,

    /* The day and time the payroll run started. */
    @field:JsonProperty("start_date")
    val startDate: java.time.OffsetDateTime? = null,

    /* The day and time the payroll run ended. */
    @field:JsonProperty("end_date")
    val endDate: java.time.OffsetDateTime? = null,

    /* The day and time the payroll run was checked. */
    @field:JsonProperty("check_date")
    val checkDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("earnings")
    val earnings: kotlin.collections.List<Earning>? = null,

    @field:JsonProperty("deductions")
    val deductions: kotlin.collections.List<Deduction>? = null,

    @field:JsonProperty("taxes")
    val taxes: kotlin.collections.List<Tax>? = null,

    /* Indicates whether or not this object has been deleted by third party webhooks. */
    @field:JsonProperty("remote_was_deleted")
    val remoteWasDeleted: kotlin.Boolean? = null,

    @field:JsonProperty("field_mappings")
    val fieldMappings: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("remote_data")
    val remoteData: kotlin.collections.List<RemoteData>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("id")
        val id: JsonNode?,

        @field:JsonProperty("remote_id")
        val remoteId: JsonNode?,

        @field:JsonProperty("employee")
        val employee: JsonNode?,

        @field:JsonProperty("payroll_run")
        val payrollRun: JsonNode?,

        @field:JsonProperty("gross_pay")
        val grossPay: JsonNode?,

        @field:JsonProperty("net_pay")
        val netPay: JsonNode?,

        @field:JsonProperty("start_date")
        val startDate: JsonNode?,

        @field:JsonProperty("end_date")
        val endDate: JsonNode?,

        @field:JsonProperty("check_date")
        val checkDate: JsonNode?,

        @field:JsonProperty("earnings")
        val earnings: kotlin.collections.List<JsonNode>?,

        @field:JsonProperty("deductions")
        val deductions: kotlin.collections.List<JsonNode>?,

        @field:JsonProperty("taxes")
        val taxes: kotlin.collections.List<JsonNode>?,

        @field:JsonProperty("remote_was_deleted")
        val remoteWasDeleted: JsonNode?,

        @field:JsonProperty("field_mappings")
        val fieldMappings: JsonNode?,

        @field:JsonProperty("remote_data")
        val remoteData: kotlin.collections.List<JsonNode>?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: EmployeePayrollRun.Expanded): EmployeePayrollRun {
            return EmployeePayrollRun(
                id = ApiClient.jsonConvertSafe(expanded.id),
                remoteId = ApiClient.jsonConvertSafe(expanded.remoteId),
                employee = ApiClient.jsonConvertSafe(expanded.employee),
                payrollRun = ApiClient.jsonConvertSafe(expanded.payrollRun),
                grossPay = ApiClient.jsonConvertSafe(expanded.grossPay),
                netPay = ApiClient.jsonConvertSafe(expanded.netPay),
                startDate = ApiClient.jsonConvertSafe(expanded.startDate),
                endDate = ApiClient.jsonConvertSafe(expanded.endDate),
                checkDate = ApiClient.jsonConvertSafe(expanded.checkDate),
                earnings = ApiClient.jsonConvertSafe(expanded.earnings),
                deductions = ApiClient.jsonConvertSafe(expanded.deductions),
                taxes = ApiClient.jsonConvertSafe(expanded.taxes),
                remoteWasDeleted = ApiClient.jsonConvertSafe(expanded.remoteWasDeleted),
                fieldMappings = ApiClient.jsonConvertSafe(expanded.fieldMappings),
                remoteData = ApiClient.jsonConvertSafe(expanded.remoteData)
            )
        }
    }
}

