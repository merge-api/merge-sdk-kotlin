/**
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.accounting.models

import dev.merge.client.accounting.models.CurrencyEnum
import dev.merge.client.accounting.models.InvoiceLineItemRequest
import dev.merge.client.accounting.models.InvoiceTypeEnum

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The Invoice Object     ### Description     The `Invoice` object represents an itemized record of goods and/or services sold to a customer. If type = accounts_payable `Invoice` is a bill, if type = accounts_receivable it's an invoice.      ### Usage Example     Fetch from the `LIST Invoices` endpoint and view a company's invoices.
 *
 * @param type Whether the invoice is an accounts receivable or accounts payable. Accounts payable invoices are commonly referred to as Bills.
 * @param contact The invoice's contact.
 * @param number The invoice's number.
 * @param issueDate The invoice's issue date.
 * @param dueDate The invoice's due date.
 * @param paidOnDate The invoice's paid date.
 * @param memo The invoice's private note.
 * @param company The company the invoice belongs to.
 * @param currency The invoice's currency.
 * @param exchangeRate The invoice's exchange rate.
 * @param totalDiscount The total discounts applied to the total cost.
 * @param subTotal The total amount being paid before taxes.
 * @param totalTaxAmount The total amount being paid in taxes.
 * @param totalAmount The invoice's total amount.
 * @param balance The invoice's remaining balance.
 * @param payments Array of `Payment` object IDs.
 * @param lineItems 
 * @param integrationParams 
 * @param linkedAccountParams 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class InvoiceRequest (

    /* Whether the invoice is an accounts receivable or accounts payable. Accounts payable invoices are commonly referred to as Bills. */
    @field:JsonProperty("type")
    val type: InvoiceTypeEnum? = null,

    /* The invoice's contact. */
    @field:JsonProperty("contact")
    val contact: java.util.UUID? = null,

    /* The invoice's number. */
    @field:JsonProperty("number")
    val number: kotlin.String? = null,

    /* The invoice's issue date. */
    @field:JsonProperty("issue_date")
    val issueDate: java.time.OffsetDateTime? = null,

    /* The invoice's due date. */
    @field:JsonProperty("due_date")
    val dueDate: java.time.OffsetDateTime? = null,

    /* The invoice's paid date. */
    @field:JsonProperty("paid_on_date")
    val paidOnDate: java.time.OffsetDateTime? = null,

    /* The invoice's private note. */
    @field:JsonProperty("memo")
    val memo: kotlin.String? = null,

    /* The company the invoice belongs to. */
    @field:JsonProperty("company")
    val company: java.util.UUID? = null,

    /* The invoice's currency. */
    @field:JsonProperty("currency")
    val currency: CurrencyEnum? = null,

    /* The invoice's exchange rate. */
    @field:JsonProperty("exchange_rate")
    val exchangeRate: java.math.BigDecimal? = null,

    /* The total discounts applied to the total cost. */
    @field:JsonProperty("total_discount")
    val totalDiscount: kotlin.Float? = null,

    /* The total amount being paid before taxes. */
    @field:JsonProperty("sub_total")
    val subTotal: kotlin.Float? = null,

    /* The total amount being paid in taxes. */
    @field:JsonProperty("total_tax_amount")
    val totalTaxAmount: kotlin.Float? = null,

    /* The invoice's total amount. */
    @field:JsonProperty("total_amount")
    val totalAmount: kotlin.Float? = null,

    /* The invoice's remaining balance. */
    @field:JsonProperty("balance")
    val balance: kotlin.Float? = null,

    /* Array of `Payment` object IDs. */
    @field:JsonProperty("payments")
    val payments: kotlin.collections.List<java.util.UUID>? = null,

    @field:JsonProperty("line_items")
    val lineItems: kotlin.collections.List<InvoiceLineItemRequest>? = null,

    @field:JsonProperty("integration_params")
    val integrationParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("linked_account_params")
    val linkedAccountParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("type")
        val type: JsonNode?,

        @field:JsonProperty("contact")
        val contact: JsonNode?,

        @field:JsonProperty("number")
        val number: JsonNode?,

        @field:JsonProperty("issue_date")
        val issueDate: JsonNode?,

        @field:JsonProperty("due_date")
        val dueDate: JsonNode?,

        @field:JsonProperty("paid_on_date")
        val paidOnDate: JsonNode?,

        @field:JsonProperty("memo")
        val memo: JsonNode?,

        @field:JsonProperty("company")
        val company: JsonNode?,

        @field:JsonProperty("currency")
        val currency: JsonNode?,

        @field:JsonProperty("exchange_rate")
        val exchangeRate: JsonNode?,

        @field:JsonProperty("total_discount")
        val totalDiscount: JsonNode?,

        @field:JsonProperty("sub_total")
        val subTotal: JsonNode?,

        @field:JsonProperty("total_tax_amount")
        val totalTaxAmount: JsonNode?,

        @field:JsonProperty("total_amount")
        val totalAmount: JsonNode?,

        @field:JsonProperty("balance")
        val balance: JsonNode?,

        @field:JsonProperty("payments")
        val payments: kotlin.collections.List<JsonNode>?,

        @field:JsonProperty("line_items")
        val lineItems: kotlin.collections.List<JsonNode>?,

        @field:JsonProperty("integration_params")
        val integrationParams: JsonNode?,

        @field:JsonProperty("linked_account_params")
        val linkedAccountParams: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: InvoiceRequest.Expanded): InvoiceRequest {
            return InvoiceRequest(
                type = ApiClient.jsonConvertSafe(expanded.type),
                contact = ApiClient.jsonConvertSafe(expanded.contact),
                number = ApiClient.jsonConvertSafe(expanded.number),
                issueDate = ApiClient.jsonConvertSafe(expanded.issueDate),
                dueDate = ApiClient.jsonConvertSafe(expanded.dueDate),
                paidOnDate = ApiClient.jsonConvertSafe(expanded.paidOnDate),
                memo = ApiClient.jsonConvertSafe(expanded.memo),
                company = ApiClient.jsonConvertSafe(expanded.company),
                currency = ApiClient.jsonConvertSafe(expanded.currency),
                exchangeRate = ApiClient.jsonConvertSafe(expanded.exchangeRate),
                totalDiscount = ApiClient.jsonConvertSafe(expanded.totalDiscount),
                subTotal = ApiClient.jsonConvertSafe(expanded.subTotal),
                totalTaxAmount = ApiClient.jsonConvertSafe(expanded.totalTaxAmount),
                totalAmount = ApiClient.jsonConvertSafe(expanded.totalAmount),
                balance = ApiClient.jsonConvertSafe(expanded.balance),
                payments = ApiClient.jsonConvertSafe(expanded.payments),
                lineItems = ApiClient.jsonConvertSafe(expanded.lineItems),
                integrationParams = ApiClient.jsonConvertSafe(expanded.integrationParams),
                linkedAccountParams = ApiClient.jsonConvertSafe(expanded.linkedAccountParams)
            )
        }
    }
}

