/**
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.accounting.models

import dev.merge.client.accounting.models.CurrencyEnum
import dev.merge.client.shared.RemoteData
import dev.merge.client.accounting.models.VendorCreditLine

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The VendorCredit Object ### Description The `VendorCredit` object is an accounts receivable transaction used to show that a customer is owed a gift or refund. A vendor credit will contain information on the amount of credit owed to the customer, the vendor that owes the credit, and the account.  ### Usage Example Fetch from the `GET VendorCredit` endpoint and view a company's vendor credits.
 *
 * @param id 
 * @param remoteId The third-party API ID of the matching object.
 * @param number The vendor credit's number.
 * @param transactionDate The vendor credit's transaction date.
 * @param vendor The vendor that owes the gift or refund.
 * @param totalAmount The vendor credit's total amount.
 * @param currency The vendor credit's currency.
 * @param exchangeRate The vendor credit's exchange rate.
 * @param company The company the vendor credit belongs to.
 * @param lines 
 * @param remoteWasDeleted Indicates whether or not this object has been deleted by third party webhooks.
 * @param fieldMappings 
 * @param remoteData 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class VendorCredit (

    @field:JsonProperty("id")
    val id: java.util.UUID? = null,

    /* The third-party API ID of the matching object. */
    @field:JsonProperty("remote_id")
    val remoteId: kotlin.String? = null,

    /* The vendor credit's number. */
    @field:JsonProperty("number")
    val number: kotlin.String? = null,

    /* The vendor credit's transaction date. */
    @field:JsonProperty("transaction_date")
    val transactionDate: java.time.OffsetDateTime? = null,

    /* The vendor that owes the gift or refund. */
    @field:JsonProperty("vendor")
    val vendor: java.util.UUID? = null,

    /* The vendor credit's total amount. */
    @field:JsonProperty("total_amount")
    val totalAmount: kotlin.Float? = null,

    /* The vendor credit's currency. */
    @field:JsonProperty("currency")
    val currency: CurrencyEnum? = null,

    /* The vendor credit's exchange rate. */
    @field:JsonProperty("exchange_rate")
    val exchangeRate: java.math.BigDecimal? = null,

    /* The company the vendor credit belongs to. */
    @field:JsonProperty("company")
    val company: java.util.UUID? = null,

    @field:JsonProperty("lines")
    val lines: kotlin.collections.List<VendorCreditLine>? = null,

    /* Indicates whether or not this object has been deleted by third party webhooks. */
    @field:JsonProperty("remote_was_deleted")
    val remoteWasDeleted: kotlin.Boolean? = null,

    @field:JsonProperty("field_mappings")
    val fieldMappings: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("remote_data")
    val remoteData: kotlin.collections.List<RemoteData>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("id")
        val id: JsonNode?,

        @field:JsonProperty("remote_id")
        val remoteId: JsonNode?,

        @field:JsonProperty("number")
        val number: JsonNode?,

        @field:JsonProperty("transaction_date")
        val transactionDate: JsonNode?,

        @field:JsonProperty("vendor")
        val vendor: JsonNode?,

        @field:JsonProperty("total_amount")
        val totalAmount: JsonNode?,

        @field:JsonProperty("currency")
        val currency: JsonNode?,

        @field:JsonProperty("exchange_rate")
        val exchangeRate: JsonNode?,

        @field:JsonProperty("company")
        val company: JsonNode?,

        @field:JsonProperty("lines")
        val lines: kotlin.collections.List<JsonNode>?,

        @field:JsonProperty("remote_was_deleted")
        val remoteWasDeleted: JsonNode?,

        @field:JsonProperty("field_mappings")
        val fieldMappings: JsonNode?,

        @field:JsonProperty("remote_data")
        val remoteData: kotlin.collections.List<JsonNode>?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: VendorCredit.Expanded): VendorCredit {
            return VendorCredit(
                id = ApiClient.jsonConvertSafe(expanded.id),
                remoteId = ApiClient.jsonConvertSafe(expanded.remoteId),
                number = ApiClient.jsonConvertSafe(expanded.number),
                transactionDate = ApiClient.jsonConvertSafe(expanded.transactionDate),
                vendor = ApiClient.jsonConvertSafe(expanded.vendor),
                totalAmount = ApiClient.jsonConvertSafe(expanded.totalAmount),
                currency = ApiClient.jsonConvertSafe(expanded.currency),
                exchangeRate = ApiClient.jsonConvertSafe(expanded.exchangeRate),
                company = ApiClient.jsonConvertSafe(expanded.company),
                lines = ApiClient.jsonConvertSafe(expanded.lines),
                remoteWasDeleted = ApiClient.jsonConvertSafe(expanded.remoteWasDeleted),
                fieldMappings = ApiClient.jsonConvertSafe(expanded.fieldMappings),
                remoteData = ApiClient.jsonConvertSafe(expanded.remoteData)
            )
        }
    }
}

