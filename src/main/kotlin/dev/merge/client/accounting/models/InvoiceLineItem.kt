/**
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.accounting.models

import dev.merge.client.accounting.models.CurrencyEnum

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The InvoiceLineItem Object ### Description The `InvoiceLineItem` object is used to represent an invoice's line items.  ### Usage Example Fetch from the `GET Invoice` endpoint and view the invoice's line items.
 *
 * @param id 
 * @param remoteId The third-party API ID of the matching object.
 * @param description The line item's description.
 * @param unitPrice The line item's unit price.
 * @param quantity The line item's quantity.
 * @param totalAmount The line item's total amount.
 * @param currency The line item's currency.
 * @param exchangeRate The line item's exchange rate.
 * @param item 
 * @param account 
 * @param trackingCategory 
 * @param company The company the line item belongs to.
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class InvoiceLineItem (

    @field:JsonProperty("id")
    val id: java.util.UUID? = null,

    /* The third-party API ID of the matching object. */
    @field:JsonProperty("remote_id")
    val remoteId: kotlin.String? = null,

    /* The line item's description. */
    @field:JsonProperty("description")
    val description: kotlin.String? = null,

    /* The line item's unit price. */
    @field:JsonProperty("unit_price")
    val unitPrice: kotlin.Float? = null,

    /* The line item's quantity. */
    @field:JsonProperty("quantity")
    val quantity: kotlin.Float? = null,

    /* The line item's total amount. */
    @field:JsonProperty("total_amount")
    val totalAmount: kotlin.Float? = null,

    /* The line item's currency. */
    @field:JsonProperty("currency")
    val currency: CurrencyEnum? = null,

    /* The line item's exchange rate. */
    @field:JsonProperty("exchange_rate")
    val exchangeRate: java.math.BigDecimal? = null,

    @field:JsonProperty("item")
    val item: java.util.UUID? = null,

    @field:JsonProperty("account")
    val account: java.util.UUID? = null,

    @field:JsonProperty("tracking_category")
    val trackingCategory: java.util.UUID? = null,

    /* The company the line item belongs to. */
    @field:JsonProperty("company")
    val company: java.util.UUID? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("id")
        val id: JsonNode?,

        @field:JsonProperty("remote_id")
        val remoteId: JsonNode?,

        @field:JsonProperty("description")
        val description: JsonNode?,

        @field:JsonProperty("unit_price")
        val unitPrice: JsonNode?,

        @field:JsonProperty("quantity")
        val quantity: JsonNode?,

        @field:JsonProperty("total_amount")
        val totalAmount: JsonNode?,

        @field:JsonProperty("currency")
        val currency: JsonNode?,

        @field:JsonProperty("exchange_rate")
        val exchangeRate: JsonNode?,

        @field:JsonProperty("item")
        val item: JsonNode?,

        @field:JsonProperty("account")
        val account: JsonNode?,

        @field:JsonProperty("tracking_category")
        val trackingCategory: JsonNode?,

        @field:JsonProperty("company")
        val company: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: InvoiceLineItem.Expanded): InvoiceLineItem {
            return InvoiceLineItem(
                id = ApiClient.jsonConvertSafe(expanded.id),
                remoteId = ApiClient.jsonConvertSafe(expanded.remoteId),
                description = ApiClient.jsonConvertSafe(expanded.description),
                unitPrice = ApiClient.jsonConvertSafe(expanded.unitPrice),
                quantity = ApiClient.jsonConvertSafe(expanded.quantity),
                totalAmount = ApiClient.jsonConvertSafe(expanded.totalAmount),
                currency = ApiClient.jsonConvertSafe(expanded.currency),
                exchangeRate = ApiClient.jsonConvertSafe(expanded.exchangeRate),
                item = ApiClient.jsonConvertSafe(expanded.item),
                account = ApiClient.jsonConvertSafe(expanded.account),
                trackingCategory = ApiClient.jsonConvertSafe(expanded.trackingCategory),
                company = ApiClient.jsonConvertSafe(expanded.company)
            )
        }
    }
}

