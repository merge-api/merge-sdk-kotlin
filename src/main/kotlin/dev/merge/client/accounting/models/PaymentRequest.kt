/**
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.accounting.models

import dev.merge.client.accounting.models.CurrencyEnum

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import dev.merge.client.shared.ApiClient

/**
 * # The Payment Object ### Description The `Payment` object represents general payments made towards a specific transaction.  ### Usage Example Fetch from the `GET Payment` endpoint and view an invoice's payment.
 *
 * @param transactionDate The payment's transaction date.
 * @param contact The supplier, or customer involved in the payment.
 * @param account The supplier’s or customer’s account in which the payment is made.
 * @param currency The payment's currency.
 * @param exchangeRate The payment's exchange rate.
 * @param company The company the payment belongs to.
 * @param totalAmount The total amount of money being paid to the supplier, or customer, after taxes.
 * @param integrationParams 
 * @param linkedAccountParams 
 */

@JsonIgnoreProperties(ignoreUnknown = true)
data class PaymentRequest (

    /* The payment's transaction date. */
    @field:JsonProperty("transaction_date")
    val transactionDate: java.time.OffsetDateTime? = null,

    /* The supplier, or customer involved in the payment. */
    @field:JsonProperty("contact")
    val contact: java.util.UUID? = null,

    /* The supplier’s or customer’s account in which the payment is made. */
    @field:JsonProperty("account")
    val account: java.util.UUID? = null,

    /* The payment's currency. */
    @field:JsonProperty("currency")
    val currency: CurrencyEnum? = null,

    /* The payment's exchange rate. */
    @field:JsonProperty("exchange_rate")
    val exchangeRate: java.math.BigDecimal? = null,

    /* The company the payment belongs to. */
    @field:JsonProperty("company")
    val company: java.util.UUID? = null,

    /* The total amount of money being paid to the supplier, or customer, after taxes. */
    @field:JsonProperty("total_amount")
    val totalAmount: kotlin.Float? = null,

    @field:JsonProperty("integration_params")
    val integrationParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @field:JsonProperty("linked_account_params")
    val linkedAccountParams: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null

) {

    @JsonIgnoreProperties(ignoreUnknown = true)
    data class Expanded(
        @field:JsonProperty("transaction_date")
        val transactionDate: JsonNode?,

        @field:JsonProperty("contact")
        val contact: JsonNode?,

        @field:JsonProperty("account")
        val account: JsonNode?,

        @field:JsonProperty("currency")
        val currency: JsonNode?,

        @field:JsonProperty("exchange_rate")
        val exchangeRate: JsonNode?,

        @field:JsonProperty("company")
        val company: JsonNode?,

        @field:JsonProperty("total_amount")
        val totalAmount: JsonNode?,

        @field:JsonProperty("integration_params")
        val integrationParams: JsonNode?,

        @field:JsonProperty("linked_account_params")
        val linkedAccountParams: JsonNode?

    )


    companion object {
        @JvmStatic
        fun normalize(expanded: PaymentRequest.Expanded): PaymentRequest {
            return PaymentRequest(
                transactionDate = ApiClient.jsonConvertSafe(expanded.transactionDate),
                contact = ApiClient.jsonConvertSafe(expanded.contact),
                account = ApiClient.jsonConvertSafe(expanded.account),
                currency = ApiClient.jsonConvertSafe(expanded.currency),
                exchangeRate = ApiClient.jsonConvertSafe(expanded.exchangeRate),
                company = ApiClient.jsonConvertSafe(expanded.company),
                totalAmount = ApiClient.jsonConvertSafe(expanded.totalAmount),
                integrationParams = ApiClient.jsonConvertSafe(expanded.integrationParams),
                linkedAccountParams = ApiClient.jsonConvertSafe(expanded.linkedAccountParams)
            )
        }
    }
}

