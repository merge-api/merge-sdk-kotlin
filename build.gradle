buildscript {
    ext.kotlin_version = '1.7.10'
    ext.ktor_version = '2.0.3'
    ext.kotlin_test_version = '1.7.10'
    ext.coroutines_version = '1.6.4'
    ext.jackson_version = '2.13.3'
    ext.java_junit_version = '4.13.2'

    repositories {
        maven { url "https://repo1.maven.org/maven2" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'java'
}

group 'dev.merge'
version '2.0.5'

wrapper {
    gradleVersion = '6.8.3'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

apply plugin: 'kotlin'

repositories {
    maven { url "https://repo1.maven.org/maven2" }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    useJUnitPlatform()
}

apply plugin: 'maven'
apply plugin: 'signing'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}


signing {
    sign configurations.archives
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_test_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "junit:junit:$java_junit_version"
}

def sonatype_username = System.getenv("SONATYPE_USERNAME")
def sonatype_pw = System.getenv("SONATYPE_PASSWORD")

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatype_username, password: sonatype_pw)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatype_username, password: sonatype_pw)
            }

            pom.project {
                name 'Merge SDK Kotlin'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'The Kotlin/JVM SDK for accessing various Merge Unified APIs'
                url 'https://docs.merge.dev'

                scm {
                    connection 'scm:git:https://github.com/merge-api/merge-sdk-kotlin.git'
                    developerConnection 'scm:git:https://github.com/merge-api/merge-sdk-kotlin.git'
                    url 'https://github.com/merge-api/merge-sdk-kotlin'
                }

                licenses {
                    license {
                        name 'Merge SDK License'
                        url 'https://github.com/merge-api/merge-sdk-kotlin/blob/main/LICENSE.md'
                    }
                }

                developers {
                    developer {
                        id 'Merge'
                        name 'Merge Engineering'
                        email 'hello@merge.dev'
                    }
                }
            }
        }
    }
}

